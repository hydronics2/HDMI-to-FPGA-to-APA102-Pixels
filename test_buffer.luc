module img_capture (
    input clk,                       // clock
    input rst,                       // reset
 
    input start,                     // start flag (1 = start)
    output idle,                     // idle flag (1 = idle)
 
    input<Camera.image_data> img,    // image data stream
 
    output<Memory.master> memOut,    // memory interface
    input<Memory.slave> memIn
  ) {
 
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, WAIT_FRAME, WAIT_PIXEL_1, WAIT_PIXEL_2, WRITE_SDRAM};
 
      // RAM may not be ready for each pixel so we need to buffer the writes
      mem_write_buffer buffer (#DEPTH(8));
    }
    dff addr[$clog2(OV2640_config.IMG_SIZE/2)];       // RAM address to write to
    dff data[32];                                     // data to write
  }
 
  always {
    buffer.memIn = memIn;                             // connect buffer to RAM
    memOut = buffer.memOut;
 
    buffer.devIn.valid = 0;                           // not valid
    buffer.devIn.write = 1;                           // always a write
    buffer.devIn.data = data.q;                       // connect data
    buffer.devIn.addr = addr.q;                       // connect address
    idle = state.q == state.IDLE;                     // idle when we are IDLE
 
    case (state.q) {
      state.IDLE:
        addr.d = 0;                                   // reset address
        if (start)                                    // if start
          state.d = state.WAIT_FRAME;                 // wait for the next frame
 
      state.WAIT_FRAME:
        if (img.end_frame)                            // if end of current frame
          state.d = state.WAIT_PIXEL_1;               // start capturing pixels
 
      state.WAIT_PIXEL_1:
        if (img.new_pixel) {                          // if new pixel     
          data.d[15:0] = img.pixel;                   // write to lower half
          state.d = state.WAIT_PIXEL_2;               // wait for next pixel
        }
 
      state.WAIT_PIXEL_2:
        if (img.new_pixel) {                          // if new pixel
          data.d[31:16] = img.pixel;                  // write to upper half
          state.d = state.WRITE_SDRAM;                // write data to SDRAM
        }
 
      state.WRITE_SDRAM:
        if (!buffer.devOut.busy) {                    // if buffer isn't full (busy)
          buffer.devIn.valid = 1;                     // new command
          addr.d = addr.q + 1;                        // increment the address
          state.d = state.WAIT_PIXEL_1;               // wait for next pixel
 
          if (addr.q == (OV2640_config.IMG_SIZE/2)-1) // if we read in all the pixels
            state.d = state.IDLE;                     // return to idle
        }
 
      default:
        state.d = state.IDLE;                         // shouldn't reach here
    }
  }
}
