module fifo_buffer (

    input clk,        // 

    input rst,        // 
    
    input hdmi_clk,
    
    input hdmi_vsyncFlag,
    
    output readFifo,
    
    input currentFrame[5],
 
    input redIn[8],
    input greenIn[8],
    input blueIn[8],
    input writeFifo,
    
    input notWriting, //are we spi writing?
    
    output printSomething,
    
    output postFifoPixelCount[24], //all the LEDs
    
    

    output rgbOut0[24],
    output rgbOut1[24],
    output rgbOut2[24],
    output rgbOut3[24],
    output rgbOut4[24],
    output rgbOut5[24],
    output rgbOut6[24],
    output rgbOut7[24],
    output rgbOut8[24],
    output rgbOut9[24],
    output rgbOut10[24],
    output rgbOut11[24],
    output rgbOut12[24],
    output rgbOut13[24],
    output rgbOut14[24],
    output rgbOut15[24],
    output rgbOut16[24],
    output rgbOut17[24],
    output rgbOut18[24],
    output rgbOut19[24],
    output rgbOut20[24],
    output rgbOut21[24],
    output rgbOut22[24],
    output rgbOut23[24],
    output rgbOut24[24],
    output rgbOut25[24],
    output rgbOut26[24],
    output rgbOut27[24],
    output rgbOut28[24],
    output rgbOut29[24],
    output rgbOut30[24],
    output rgbOut31[24],
    output rgbOut32[24],

    input writePixelAddress0[10],
    input writePixelAddress1[10],
    input writePixelAddress2[10],
    input writePixelAddress3[10],
    input writePixelAddress4[10],
    input writePixelAddress5[10],
    input writePixelAddress6[10],
    input writePixelAddress7[10],
    input writePixelAddress8[10],
    input writePixelAddress9[10],
    input writePixelAddress10[10],
    input writePixelAddress11[10],
    input writePixelAddress12[10],
    input writePixelAddress13[10],
    input writePixelAddress14[10],
    input writePixelAddress15[10],
    input writePixelAddress16[10],
    input writePixelAddress17[10],
    input writePixelAddress18[10],
    input writePixelAddress19[10],
    input writePixelAddress20[10],
    input writePixelAddress21[10],
    input writePixelAddress22[10],
    input writePixelAddress23[10],
    input writePixelAddress24[10],
    input writePixelAddress25[10],
    input writePixelAddress26[10],
    input writePixelAddress27[10],
    input writePixelAddress28[10],
    input writePixelAddress29[10],

    input writePixelAddress30[10],
    input writePixelAddress31[10],
    input writePixelAddress32[10],
    
    output startWritingFlag,
    output startWritingFlag1,
    output startWritingFlag2,
    output startWritingFlag3,
    output startWritingFlag4,
    output startWritingFlag5,
    output startWritingFlag6,
    output startWritingFlag7,
    output startWritingFlag8,
    output startWritingFlag9,
    output startWritingFlag10,
    
    
    input startPixel0[10],
    input startPixel1[10],
    input startPixel2[10],
    
        
    output rowPixelAddress[5],
    
    input rowStartPixel0[10],  //bottom left
    input rowStartPixel1[10],  //top right
    input rowStartPixel2[10],  //bottom left
    input rowStartPixel3[10], //top left
    input rowStartPixel4[10], //top right
    input rowStartPixel5[10],  //top left
    //input rowStartPixel6[10],
    input rowStartPixel7[10],
    //input rowStartPixel8[10],
    //input rowStartPixel9[10],
    //input rowStartPixel10[10],
    //input rowStartPixel11[10],
    //input rowStartPixel12[10],
    //input rowStartPixel13[10],
    //input rowStartPixel14[10],
    //input rowStartPixel15[10],
    //input rowStartPixel16[10],
    //input rowStartPixel17[10],
    //input rowStartPixel18[10],
    //input rowStartPixel19[10],
    //input rowStartPixel20[10],
    //input rowStartPixel21[10],
    //input rowStartPixel22[10],
    //input rowStartPixel23[10],
    //input rowStartPixel24[10],
    //input rowStartPixel25[10],
    //input rowStartPixel26[10],
    //input rowStartPixel27[10],
    //input rowStartPixel28[10],
    //input rowStartPixel29[10],
    //input rowStartPixel30[10],
    //input rowStartPixel31[10],
    //input rowStartPixel32[10],
    
        
    output notConnected[24]
    
  ) {
 
  .clk(clk) {
    .rst(rst) {  
             
    }

    dff rgb0Counter[10];
    dff rgb1Counter[10];
    dff rgb2Counter[10];

    
    dff rowCounter[8]; //219 rows
    dff columnCounter[7]; //102 columns wide
    dff pixel[24];
    dff newPixelFlag[2];
    
    dff pixelCounter[24]; //20,433 pixels
    
    dff frameCounter[5];
    dff readWriteFlag[4];
    
    dff frame0Write;
    dff frame1Write;
    dff frame2Write;
    dff frame3Write;
    dff frame4Write;
    dff frame5Write;
    dff frame6Write;
    dff frame7Write;
    dff frame8Write;
    dff frame9Write;
    dff frame10Write;
    

  
    // we need our RAM to have an entry for every value of name_count
    simple_ram rgb0 (#SIZE(24), #DEPTH(700));
    simple_ram rgb1 (#SIZE(24), #DEPTH(700));
    simple_ram rgb2 (#SIZE(24), #DEPTH(700));
  }
 
 
  // reset conditioner for pclk clock domain
  reset_conditioner wrst_cond (.clk(hdmi_clk), .in(rst));
 
  // asyncronous fifo for crossing clock domains (pclk to clk)
  async_fifo fifo (#SIZE(24), #DEPTH(64), .wclk(hdmi_clk), .rclk(clk), .wrst(wrst_cond.out), .rrst(rst)); //going from 128 to 64 kept it from glitching
 
  
  always {
    notConnected = 0;
    
    printSomething = 0;
    
    startWritingFlag = 0;
    startWritingFlag1 = 0;
    startWritingFlag2 = 0; 
    startWritingFlag3 = 0;
    startWritingFlag4 = 0; 
    startWritingFlag5 = 0;
    startWritingFlag6 = 0; 
    startWritingFlag7 = 0; 
    startWritingFlag8 = 0; 
    startWritingFlag9 = 0; 
    startWritingFlag10 = 0;
    
    //postFifoPixelCount = pixelCounter.q;
    postFifoPixelCount = 0;
    
    rowPixelAddress = rowCounter.q;
    
    rgb0.address = rgb0Counter.q;
    rgb0.write_data = 8hxx;
    rgb0.write_en = 0;

    rgb1.address = rgb1Counter.q;
    rgb1.write_data = 8hxx;
    rgb1.write_en = 0;
    
    rgb2.address = rgb2Counter.q;
    rgb2.write_data = 8hxx;
    rgb2.write_en = 0;

    
    fifo.wput = writeFifo;   // always put data into the fifo
    //fifo.wput = 1;
    fifo.rget = 0;   // always get data from the fifo
   
    fifo.din[7:0] = redIn;
    fifo.din[15:8] = greenIn;
    fifo.din[23:16] = blueIn;
 
    rgbOut0 = 0;
    rgbOut1 = 0;
    rgbOut2 = 0;
    rgbOut3 = 0;
    rgbOut4 = 0;
    rgbOut5 = 0;    
    rgbOut6 = 0;
    rgbOut7 = 0;
    rgbOut8 = 0;
    rgbOut9 = 0;
    rgbOut10 = 0;
    rgbOut11 = 0;
    rgbOut12 = 0;
    rgbOut13 = 0;
    rgbOut14 = 0;
    rgbOut15 = 0;
    rgbOut16 = 0;
    rgbOut17 = 0;
    
    rgbOut18 = 0;
    rgbOut19 = 0;
    rgbOut20 = 0;
    rgbOut21 = 0;
    rgbOut22 = 0;
    rgbOut23 = 0;    
    rgbOut24 = 0;
    rgbOut25 = 0;
    rgbOut26 = 0;
    rgbOut27 = 0;
    rgbOut28 = 0;
    rgbOut29 = 0;
    rgbOut30 = 0;
    rgbOut31 = 0;
    rgbOut32 = 0;
    
    readFifo = 0;
    

    if(hdmi_vsyncFlag) //start of frame... reset pixel counter
    {
      readWriteFlag.d = 0;
      
      columnCounter.d = 0; 
      rowCounter.d = 1;
      newPixelFlag.d = 0;
      pixelCounter.d = 0;
      
      rgb0Counter.d = startPixel0;
      rgb1Counter.d = startPixel1;
      rgb2Counter.d = startPixel2;
      
      frame0Write.d = 0;
      frame1Write.d = 0; 
      frame2Write.d = 0;
      frame3Write.d = 0;
      frame4Write.d = 0;    
      frame5Write.d = 0;
      frame6Write.d = 0;
      frame7Write.d = 0;
      frame8Write.d = 0;
      frame9Write.d = 0;
      frame10Write.d = 0;       
      
      frameCounter.d = currentFrame;
    }    

    
    //-----------------------------FRAME 0 ----first Frame
    if(frameCounter.q == 0)
    { //read  into RAM panels 0,1,2
       if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;      
        }
        
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }   
        
        if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb0Counter.d = rowStartPixel0;
              rgb1Counter.d = rowStartPixel1;
              rgb2Counter.d = rowStartPixel2;
            }     
          }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag = 1;
          frame0Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;  
        }
        
        if(frame0Write.q == 1)
        {
          rgb0.address = writePixelAddress0;
          rgb0Counter.d = writePixelAddress0;
          rgbOut0 = rgb0.read_data;
          
          rgb1.address = writePixelAddress1;
          rgb1Counter.d = writePixelAddress1;
          rgbOut1 = rgb1.read_data;
          
          rgb2.address = writePixelAddress2;
          rgb2Counter.d = writePixelAddress2;
          rgbOut2 = rgb2.read_data;     
        } 
       
      }

    
    
         
        //-----------------------------FRAME 1 ---------- .. tl,tr,tl,.. 3,4,5
      if(frameCounter.q == 1)
      {
          if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          } 

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q + 1;
            }else{
              rgb0Counter.d = rgb0Counter.q - 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q + 1;
            }else{
              rgb2Counter.d = rgb2Counter.q - 1;
            } 
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel3;
            rgb1Counter.d = rowStartPixel4;
            rgb2Counter.d = rowStartPixel5;
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag1 = 1;
          frame1Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }      
        
        if(frame1Write.q)
        {
          rgb0.address = writePixelAddress3;
          rgb0Counter.d = writePixelAddress3;
          rgbOut3 = rgb0.read_data;
          
          rgb1.address = writePixelAddress4;
          rgb1Counter.d = writePixelAddress4;
          rgbOut4 = rgb1.read_data;
          
          rgb2.address = writePixelAddress5;
          rgb2Counter.d = writePixelAddress5;
          rgbOut5 = rgb2.read_data;        
        }
      }
    
    

        
    
      //-----------------------------FRAME 2 ---------- .... 6,7,8
      if(frameCounter.q == 2)
      {
          if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          } 

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q + 1;
            }else{
              rgb1Counter.d = rgb1Counter.q - 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            } 
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;  //bottom left
            rgb1Counter.d = rowStartPixel7;  //bottom right
            rgb2Counter.d = rowStartPixel2;  //bottom left
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag2 = 1;
          frame2Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }      
        
        if(frame2Write.q)
        {
          rgb0.address = writePixelAddress6;
          rgb0Counter.d = writePixelAddress6;
          rgbOut6 = rgb0.read_data;
          
          rgb1.address = writePixelAddress7;
          rgb1Counter.d = writePixelAddress7;
          rgbOut7 = rgb1.read_data;
          
          rgb2.address = writePixelAddress8;
          rgb2Counter.d = writePixelAddress8;
          rgbOut8 = rgb2.read_data;        
        }
      }
    

        
        //-----------------------------FRAME 3 ------- panels 9,10&11 
      if(frameCounter.q == 3)
      {
        if (!fifo.empty && newPixelFlag.q == 0) 
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }
       
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;
            rgb1Counter.d = rowStartPixel1;
            rgb2Counter.d = rowStartPixel2;
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag3 = 1;
          frame3Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }    
        if(frame3Write.q)
        {
          rgb0.address = writePixelAddress9;
          rgb0Counter.d = writePixelAddress9;
          rgbOut9 = rgb0.read_data;
          
          rgb1.address = writePixelAddress10;
          rgb1Counter.d = writePixelAddress10;
          rgbOut10 = rgb1.read_data;
          
          rgb2.address = writePixelAddress11;
          rgb2Counter.d = writePixelAddress11;
          rgbOut11 = rgb2.read_data;        
        }                 
      } 
        
 
    
    
        //-----------------------------FRAME 4 ----.... 12,13,14
    if(frameCounter.q == 4)
    { 
       if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;      
        }
        
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }   
        
        if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb0Counter.d = rowStartPixel0;
              rgb1Counter.d = rowStartPixel1;
              rgb2Counter.d = rowStartPixel2;
            }     
          }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag4 = 1;
          frame4Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;  
        }
        
        if(frame4Write.q == 1)
        {
          rgb0.address = writePixelAddress12;
          rgb0Counter.d = writePixelAddress12;
          rgbOut12 = rgb0.read_data;
          
          rgb1.address = writePixelAddress13;
          rgb1Counter.d = writePixelAddress13;
          rgbOut13 = rgb1.read_data;
          
          rgb2.address = writePixelAddress14;
          rgb2Counter.d = writePixelAddress14;
          rgbOut14 = rgb2.read_data;     
        }        
      }
          
     
    
    
 
      //-----------------------------FRAME 5 ------- panels 15,16,17
      if(frameCounter.q == 5)
      {
        if (!fifo.empty && newPixelFlag.q == 0) 
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }
       
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;
            rgb1Counter.d = rowStartPixel1;
            rgb2Counter.d = rowStartPixel2;
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag5 = 1;
          frame5Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }    
        if(frame5Write.q)
        {
          rgb0.address = writePixelAddress15;
          rgb0Counter.d = writePixelAddress15;
          rgbOut15 = rgb0.read_data;
          
          rgb1.address = writePixelAddress16;
          rgb1Counter.d = writePixelAddress16;
          rgbOut16 = rgb1.read_data;
          
          rgb2.address = writePixelAddress17;
          rgb2Counter.d = writePixelAddress17;
          rgbOut17 = rgb2.read_data;        
        }                 
      } 
    

    
          //-----------------------------FRAME 6 ------- panels 18,19,20
      if(frameCounter.q == 6)
      {
        if (!fifo.empty && newPixelFlag.q == 0) 
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }
       
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel3;
            rgb1Counter.d = rowStartPixel4;
            rgb2Counter.d = rowStartPixel5;
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag6 = 1;
          frame6Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }    
        if(frame6Write.q)
        {
          rgb0.address = writePixelAddress18;
          rgb0Counter.d = writePixelAddress18;
          rgbOut18 = rgb0.read_data;
          
          rgb1.address = writePixelAddress19;
          rgb1Counter.d = writePixelAddress19;
          rgbOut19 = rgb1.read_data;
          
          rgb2.address = writePixelAddress20;
          rgb2Counter.d = writePixelAddress20;
          rgbOut20 = rgb2.read_data;        
        }                 
      } 
    

    
      //-----------------------------FRAME 7 ---------- .... 21,22,23
      if(frameCounter.q == 7)
      {
          if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          } 

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q + 1;
            }else{
              rgb1Counter.d = rgb1Counter.q - 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            } 
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;  //bottom left
            rgb1Counter.d = rowStartPixel7;  //bottom right
            rgb2Counter.d = rowStartPixel0;  //bottom left
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag7 = 1;
          frame7Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }      
        
        if(frame7Write.q)
        {
          rgb0.address = writePixelAddress21;
          rgb0Counter.d = writePixelAddress21;
          rgbOut21 = rgb0.read_data;
          
          rgb1.address = writePixelAddress22;
          rgb1Counter.d = writePixelAddress22;
          rgbOut22 = rgb1.read_data;
          
          rgb2.address = writePixelAddress23;
          rgb2Counter.d = writePixelAddress23;
          rgbOut23 = rgb2.read_data;        
        }
      }
    
    
    
               
      //-----------------------------FRAME 8 ------- panels 24,25,26
      if(frameCounter.q == 8)
      {
        if (!fifo.empty && newPixelFlag.q == 0) 
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }
       
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }
                      
        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;
            rgb1Counter.d = rowStartPixel1;
            rgb2Counter.d = rowStartPixel2;
          }     
        }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag8 = 1;
          frame8Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }    
        if(frame8Write.q)
        {
          rgb0.address = writePixelAddress24;
          rgb0Counter.d = writePixelAddress24;
          rgbOut24 = rgb0.read_data;
          
          rgb1.address = writePixelAddress25;
          rgb1Counter.d = writePixelAddress25;
          rgbOut25 = rgb1.read_data;
          
          rgb2.address = writePixelAddress26;
          rgb2Counter.d = writePixelAddress26;
          rgbOut26 = rgb2.read_data;        
        }                 
      } 
    
    
    
 
    
    
       
        //-----------------------------FRAME 9 ----.... 27,28,29
    if(frameCounter.q == 9)
    { 
       if (!fifo.empty && newPixelFlag.q == 0) 
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;      
        }
        
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }   
        
        if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb0Counter.d = rowStartPixel0;
              rgb1Counter.d = rowStartPixel1;
              rgb2Counter.d = rowStartPixel2;
            }     
          }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag9 = 1;
          frame9Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;  
        }
        
        if(frame9Write.q == 1)
        {
          rgb0.address = writePixelAddress27;
          rgb0Counter.d = writePixelAddress27;
          rgbOut27 = rgb0.read_data;
          
          rgb1.address = writePixelAddress28;
          rgb1Counter.d = writePixelAddress28;
          rgbOut28 = rgb1.read_data;
          
          rgb2.address = writePixelAddress29;
          rgb2Counter.d = writePixelAddress29;
          rgbOut29 = rgb2.read_data;     
        }        
      }
          
     
 
    
    
       
        
        //-----------------------------FRAME 10 ------- last frame
      if(frameCounter.q == 10)
      {
        if (!fifo.empty && newPixelFlag.q == 0) 
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;           
        }
        
        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;
          
          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            } 
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }
    
          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;
            
            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }   
        
        if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb0Counter.d = rowStartPixel0;
              rgb1Counter.d = rowStartPixel1;
              rgb2Counter.d = rowStartPixel2;
            }     
          }
        
        if(pixelCounter.q == 2039) //all 3 panels captured in ram
        {
          startWritingFlag10 = 1;
          frame10Write.d = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }          
          if(frame10Write.q)
          {
            rgb0.address = writePixelAddress30;
            rgb0Counter.d = writePixelAddress30;
            rgbOut30 = rgb0.read_data;
            
            rgb1.address = writePixelAddress31;
            rgb1Counter.d = writePixelAddress31;
            rgbOut31 = rgb1.read_data;
            
            rgb2.address = writePixelAddress32;
            rgb2Counter.d = writePixelAddress32;
            rgbOut32 = rgb2.read_data;        
          }    
        } 
          
    
  
  }
}