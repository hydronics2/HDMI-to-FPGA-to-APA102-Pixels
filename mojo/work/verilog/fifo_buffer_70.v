/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fifo_buffer_70 (
    input clk,
    input rst,
    input hdmi_clk,
    input hdmi_vsyncFlag,
    input [1:0] globalReadWriteStageFlag,
    output reg [3:0] currentFrame,
    input [7:0] redIn,
    input [7:0] greenIn,
    input [7:0] blueIn,
    input writeFifo,
    input notWriting,
    output reg printSomething,
    output reg [23:0] postFifoPixelCount,
    output reg [23:0] rgbOut0,
    output reg [23:0] rgbOut1,
    output reg [23:0] rgbOut2,
    output reg [23:0] rgbOut3,
    output reg [23:0] rgbOut4,
    output reg [23:0] rgbOut5,
    output reg [23:0] rgbOut6,
    output reg [23:0] rgbOut7,
    output reg [23:0] rgbOut8,
    output reg [23:0] rgbOut9,
    output reg [23:0] rgbOut10,
    output reg [23:0] rgbOut11,
    output reg [23:0] rgbOut12,
    output reg [23:0] rgbOut13,
    output reg [23:0] rgbOut14,
    output reg [23:0] rgbOut15,
    output reg [23:0] rgbOut16,
    output reg [23:0] rgbOut17,
    output reg [23:0] rgbOut18,
    output reg [23:0] rgbOut19,
    output reg [23:0] rgbOut20,
    output reg [23:0] rgbOut21,
    output reg [23:0] rgbOut22,
    output reg [23:0] rgbOut23,
    output reg [23:0] rgbOut24,
    output reg [23:0] rgbOut25,
    output reg [23:0] rgbOut26,
    output reg [23:0] rgbOut27,
    output reg [23:0] rgbOut28,
    output reg [23:0] rgbOut29,
    output reg [23:0] rgbOut30,
    output reg [23:0] rgbOut31,
    output reg [23:0] rgbOut32,
    input [9:0] writePixelAddress0,
    input [9:0] writePixelAddress1,
    input [9:0] writePixelAddress2,
    input [9:0] writePixelAddress3,
    input [9:0] writePixelAddress4,
    input [9:0] writePixelAddress5,
    input [9:0] writePixelAddress6,
    input [9:0] writePixelAddress7,
    input [9:0] writePixelAddress8,
    input [9:0] writePixelAddress9,
    input [9:0] writePixelAddress10,
    input [9:0] writePixelAddress11,
    input [9:0] writePixelAddress12,
    input [9:0] writePixelAddress13,
    input [9:0] writePixelAddress14,
    input [9:0] writePixelAddress15,
    input [9:0] writePixelAddress16,
    input [9:0] writePixelAddress17,
    input [9:0] writePixelAddress18,
    input [9:0] writePixelAddress19,
    input [9:0] writePixelAddress20,
    input [9:0] writePixelAddress21,
    input [9:0] writePixelAddress22,
    input [9:0] writePixelAddress23,
    input [9:0] writePixelAddress24,
    input [9:0] writePixelAddress25,
    input [9:0] writePixelAddress26,
    input [9:0] writePixelAddress27,
    input [9:0] writePixelAddress28,
    input [9:0] writePixelAddress29,
    input [9:0] writePixelAddress30,
    input [9:0] writePixelAddress31,
    input [9:0] writePixelAddress32,
    output reg startWritingFlag,
    output reg startWritingFlag1,
    output reg startWritingFlag2,
    output reg startWritingFlag3,
    output reg startWritingFlag4,
    output reg startWritingFlag5,
    output reg startWritingFlag6,
    output reg startWritingFlag7,
    output reg startWritingFlag8,
    output reg startWritingFlag9,
    output reg startWritingFlag10,
    input [9:0] startPixel0,
    input [9:0] startPixel1,
    input [9:0] startPixel2,
    output reg [4:0] rowPixelAddress,
    input [9:0] rowStartPixel0,
    input [9:0] rowStartPixel1,
    input [9:0] rowStartPixel2,
    input [9:0] rowStartPixel3,
    input [9:0] rowStartPixel4,
    input [9:0] rowStartPixel5,
    input [9:0] rowStartPixel7,
    output reg [23:0] notConnected
  );
  
  
  
  reg [9:0] M_rgb0Counter_d, M_rgb0Counter_q = 1'h0;
  reg [9:0] M_rgb1Counter_d, M_rgb1Counter_q = 1'h0;
  reg [9:0] M_rgb2Counter_d, M_rgb2Counter_q = 1'h0;
  reg [9:0] M_rgb3Counter_d, M_rgb3Counter_q = 1'h0;
  reg [9:0] M_rgb4Counter_d, M_rgb4Counter_q = 1'h0;
  reg [9:0] M_rgb5Counter_d, M_rgb5Counter_q = 1'h0;
  reg [9:0] M_rgb6Counter_d, M_rgb6Counter_q = 1'h0;
  reg [9:0] M_rgb7Counter_d, M_rgb7Counter_q = 1'h0;
  reg [9:0] M_rgb8Counter_d, M_rgb8Counter_q = 1'h0;
  reg [9:0] M_rgb9Counter_d, M_rgb9Counter_q = 1'h0;
  reg [9:0] M_rgb10Counter_d, M_rgb10Counter_q = 1'h0;
  reg [9:0] M_rgb11Counter_d, M_rgb11Counter_q = 1'h0;
  reg [7:0] M_rowCounter_d, M_rowCounter_q = 1'h0;
  reg [6:0] M_columnCounter_d, M_columnCounter_q = 1'h0;
  reg [23:0] M_pixel_d, M_pixel_q = 1'h0;
  reg [1:0] M_newPixelFlag_d, M_newPixelFlag_q = 1'h0;
  reg [23:0] M_pixelCounter_d, M_pixelCounter_q = 1'h0;
  reg [3:0] M_frameCounter_d, M_frameCounter_q = 1'h0;
  reg M_frame0Write_d, M_frame0Write_q = 1'h0;
  reg M_frame1Write_d, M_frame1Write_q = 1'h0;
  reg M_frame2Write_d, M_frame2Write_q = 1'h0;
  reg M_frame3Write_d, M_frame3Write_q = 1'h0;
  reg [2:0] M_readWriteStage_d, M_readWriteStage_q = 1'h0;
  reg [1:0] M_startRoutine_d, M_startRoutine_q = 1'h0;
  wire [24-1:0] M_rgb0_read_data;
  reg [10-1:0] M_rgb0_address;
  reg [24-1:0] M_rgb0_write_data;
  reg [1-1:0] M_rgb0_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb0 (
    .clk(clk),
    .address(M_rgb0_address),
    .write_data(M_rgb0_write_data),
    .write_en(M_rgb0_write_en),
    .read_data(M_rgb0_read_data)
  );
  wire [24-1:0] M_rgb1_read_data;
  reg [10-1:0] M_rgb1_address;
  reg [24-1:0] M_rgb1_write_data;
  reg [1-1:0] M_rgb1_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb1 (
    .clk(clk),
    .address(M_rgb1_address),
    .write_data(M_rgb1_write_data),
    .write_en(M_rgb1_write_en),
    .read_data(M_rgb1_read_data)
  );
  wire [24-1:0] M_rgb2_read_data;
  reg [10-1:0] M_rgb2_address;
  reg [24-1:0] M_rgb2_write_data;
  reg [1-1:0] M_rgb2_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb2 (
    .clk(clk),
    .address(M_rgb2_address),
    .write_data(M_rgb2_write_data),
    .write_en(M_rgb2_write_en),
    .read_data(M_rgb2_read_data)
  );
  wire [24-1:0] M_rgb3_read_data;
  reg [10-1:0] M_rgb3_address;
  reg [24-1:0] M_rgb3_write_data;
  reg [1-1:0] M_rgb3_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb3 (
    .clk(clk),
    .address(M_rgb3_address),
    .write_data(M_rgb3_write_data),
    .write_en(M_rgb3_write_en),
    .read_data(M_rgb3_read_data)
  );
  wire [24-1:0] M_rgb4_read_data;
  reg [10-1:0] M_rgb4_address;
  reg [24-1:0] M_rgb4_write_data;
  reg [1-1:0] M_rgb4_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb4 (
    .clk(clk),
    .address(M_rgb4_address),
    .write_data(M_rgb4_write_data),
    .write_en(M_rgb4_write_en),
    .read_data(M_rgb4_read_data)
  );
  wire [24-1:0] M_rgb5_read_data;
  reg [10-1:0] M_rgb5_address;
  reg [24-1:0] M_rgb5_write_data;
  reg [1-1:0] M_rgb5_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb5 (
    .clk(clk),
    .address(M_rgb5_address),
    .write_data(M_rgb5_write_data),
    .write_en(M_rgb5_write_en),
    .read_data(M_rgb5_read_data)
  );
  wire [24-1:0] M_rgb6_read_data;
  reg [10-1:0] M_rgb6_address;
  reg [24-1:0] M_rgb6_write_data;
  reg [1-1:0] M_rgb6_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb6 (
    .clk(clk),
    .address(M_rgb6_address),
    .write_data(M_rgb6_write_data),
    .write_en(M_rgb6_write_en),
    .read_data(M_rgb6_read_data)
  );
  wire [24-1:0] M_rgb7_read_data;
  reg [10-1:0] M_rgb7_address;
  reg [24-1:0] M_rgb7_write_data;
  reg [1-1:0] M_rgb7_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb7 (
    .clk(clk),
    .address(M_rgb7_address),
    .write_data(M_rgb7_write_data),
    .write_en(M_rgb7_write_en),
    .read_data(M_rgb7_read_data)
  );
  wire [24-1:0] M_rgb8_read_data;
  reg [10-1:0] M_rgb8_address;
  reg [24-1:0] M_rgb8_write_data;
  reg [1-1:0] M_rgb8_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb8 (
    .clk(clk),
    .address(M_rgb8_address),
    .write_data(M_rgb8_write_data),
    .write_en(M_rgb8_write_en),
    .read_data(M_rgb8_read_data)
  );
  wire [24-1:0] M_rgb9_read_data;
  reg [10-1:0] M_rgb9_address;
  reg [24-1:0] M_rgb9_write_data;
  reg [1-1:0] M_rgb9_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb9 (
    .clk(clk),
    .address(M_rgb9_address),
    .write_data(M_rgb9_write_data),
    .write_en(M_rgb9_write_en),
    .read_data(M_rgb9_read_data)
  );
  wire [24-1:0] M_rgb10_read_data;
  reg [10-1:0] M_rgb10_address;
  reg [24-1:0] M_rgb10_write_data;
  reg [1-1:0] M_rgb10_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb10 (
    .clk(clk),
    .address(M_rgb10_address),
    .write_data(M_rgb10_write_data),
    .write_en(M_rgb10_write_en),
    .read_data(M_rgb10_read_data)
  );
  wire [24-1:0] M_rgb11_read_data;
  reg [10-1:0] M_rgb11_address;
  reg [24-1:0] M_rgb11_write_data;
  reg [1-1:0] M_rgb11_write_en;
  simple_ram_74 #(.SIZE(5'h18), .DEPTH(10'h2b7)) rgb11 (
    .clk(clk),
    .address(M_rgb11_address),
    .write_data(M_rgb11_write_data),
    .write_en(M_rgb11_write_en),
    .read_data(M_rgb11_read_data)
  );
  
  wire [1-1:0] M_wrst_cond_out;
  reset_conditioner_3 wrst_cond (
    .clk(hdmi_clk),
    .in(rst),
    .out(M_wrst_cond_out)
  );
  
  wire [1-1:0] M_fifo_full;
  wire [24-1:0] M_fifo_dout;
  wire [1-1:0] M_fifo_empty;
  reg [24-1:0] M_fifo_din;
  reg [1-1:0] M_fifo_wput;
  reg [1-1:0] M_fifo_rget;
  async_fifo_86 fifo (
    .wclk(hdmi_clk),
    .rclk(clk),
    .wrst(M_wrst_cond_out),
    .rrst(rst),
    .din(M_fifo_din),
    .wput(M_fifo_wput),
    .rget(M_fifo_rget),
    .full(M_fifo_full),
    .dout(M_fifo_dout),
    .empty(M_fifo_empty)
  );
  
  always @* begin
    M_rgb6Counter_d = M_rgb6Counter_q;
    M_rgb11Counter_d = M_rgb11Counter_q;
    M_rgb8Counter_d = M_rgb8Counter_q;
    M_frame2Write_d = M_frame2Write_q;
    M_newPixelFlag_d = M_newPixelFlag_q;
    M_pixel_d = M_pixel_q;
    M_rgb0Counter_d = M_rgb0Counter_q;
    M_rgb10Counter_d = M_rgb10Counter_q;
    M_rowCounter_d = M_rowCounter_q;
    M_pixelCounter_d = M_pixelCounter_q;
    M_columnCounter_d = M_columnCounter_q;
    M_rgb4Counter_d = M_rgb4Counter_q;
    M_readWriteStage_d = M_readWriteStage_q;
    M_rgb3Counter_d = M_rgb3Counter_q;
    M_rgb2Counter_d = M_rgb2Counter_q;
    M_frame0Write_d = M_frame0Write_q;
    M_startRoutine_d = M_startRoutine_q;
    M_rgb7Counter_d = M_rgb7Counter_q;
    M_rgb5Counter_d = M_rgb5Counter_q;
    M_frame3Write_d = M_frame3Write_q;
    M_frame1Write_d = M_frame1Write_q;
    M_rgb1Counter_d = M_rgb1Counter_q;
    M_frameCounter_d = M_frameCounter_q;
    M_rgb9Counter_d = M_rgb9Counter_q;
    
    notConnected = 1'h0;
    printSomething = 1'h0;
    startWritingFlag = 1'h0;
    startWritingFlag1 = 1'h0;
    startWritingFlag2 = 1'h0;
    startWritingFlag3 = 1'h0;
    startWritingFlag4 = 1'h0;
    startWritingFlag5 = 1'h0;
    startWritingFlag6 = 1'h0;
    startWritingFlag7 = 1'h0;
    startWritingFlag8 = 1'h0;
    startWritingFlag9 = 1'h0;
    startWritingFlag10 = 1'h0;
    postFifoPixelCount = 1'h0;
    rowPixelAddress = M_rowCounter_q;
    M_rgb0_address = M_rgb0Counter_q;
    M_rgb0_write_data = 8'bxxxxxxxx;
    M_rgb0_write_en = 1'h0;
    M_rgb1_address = M_rgb1Counter_q;
    M_rgb1_write_data = 8'bxxxxxxxx;
    M_rgb1_write_en = 1'h0;
    M_rgb2_address = M_rgb2Counter_q;
    M_rgb2_write_data = 8'bxxxxxxxx;
    M_rgb2_write_en = 1'h0;
    M_rgb3_address = M_rgb3Counter_q;
    M_rgb3_write_data = 8'bxxxxxxxx;
    M_rgb3_write_en = 1'h0;
    M_rgb4_address = M_rgb4Counter_q;
    M_rgb4_write_data = 8'bxxxxxxxx;
    M_rgb4_write_en = 1'h0;
    M_rgb5_address = M_rgb5Counter_q;
    M_rgb5_write_data = 8'bxxxxxxxx;
    M_rgb5_write_en = 1'h0;
    M_rgb6_address = M_rgb6Counter_q;
    M_rgb6_write_data = 8'bxxxxxxxx;
    M_rgb6_write_en = 1'h0;
    M_rgb7_address = M_rgb7Counter_q;
    M_rgb7_write_data = 8'bxxxxxxxx;
    M_rgb7_write_en = 1'h0;
    M_rgb8_address = M_rgb8Counter_q;
    M_rgb8_write_data = 8'bxxxxxxxx;
    M_rgb8_write_en = 1'h0;
    M_rgb9_address = M_rgb9Counter_q;
    M_rgb9_write_data = 8'bxxxxxxxx;
    M_rgb9_write_en = 1'h0;
    M_rgb10_address = M_rgb10Counter_q;
    M_rgb10_write_data = 8'bxxxxxxxx;
    M_rgb10_write_en = 1'h0;
    M_rgb11_address = M_rgb11Counter_q;
    M_rgb11_write_data = 8'bxxxxxxxx;
    M_rgb11_write_en = 1'h0;
    M_fifo_wput = writeFifo;
    M_fifo_rget = 1'h0;
    M_fifo_din[0+7-:8] = redIn;
    M_fifo_din[8+7-:8] = greenIn;
    M_fifo_din[16+7-:8] = blueIn;
    rgbOut0 = 1'h0;
    rgbOut1 = 1'h0;
    rgbOut2 = 1'h0;
    rgbOut3 = 1'h0;
    rgbOut4 = 1'h0;
    rgbOut5 = 1'h0;
    rgbOut6 = 1'h0;
    rgbOut7 = 1'h0;
    rgbOut8 = 1'h0;
    rgbOut9 = 1'h0;
    rgbOut10 = 1'h0;
    rgbOut11 = 1'h0;
    rgbOut12 = 1'h0;
    rgbOut13 = 1'h0;
    rgbOut14 = 1'h0;
    rgbOut15 = 1'h0;
    rgbOut16 = 1'h0;
    rgbOut17 = 1'h0;
    rgbOut18 = 1'h0;
    rgbOut19 = 1'h0;
    rgbOut20 = 1'h0;
    rgbOut21 = 1'h0;
    rgbOut22 = 1'h0;
    rgbOut23 = 1'h0;
    rgbOut24 = 1'h0;
    rgbOut25 = 1'h0;
    rgbOut26 = 1'h0;
    rgbOut27 = 1'h0;
    rgbOut28 = 1'h0;
    rgbOut29 = 1'h0;
    rgbOut30 = 1'h0;
    rgbOut31 = 1'h0;
    rgbOut32 = 1'h0;
    currentFrame = M_frameCounter_q;
    if (hdmi_vsyncFlag) begin
      M_columnCounter_d = 1'h0;
      M_rowCounter_d = 1'h1;
      M_newPixelFlag_d = 1'h0;
      M_pixelCounter_d = 1'h0;
      M_frame0Write_d = 1'h0;
      M_frame1Write_d = 1'h0;
      M_frame2Write_d = 1'h0;
      M_frame3Write_d = 1'h0;
      M_startRoutine_d = 1'h1;
    end
    M_readWriteStage_d = globalReadWriteStageFlag;
    if (M_startRoutine_q) begin
      if (M_readWriteStage_q == 1'h0) begin
        M_frameCounter_d = 1'h0;
        M_rgb0Counter_d = 10'h2a7;
        M_rgb1Counter_d = 6'h21;
        M_rgb2Counter_d = 10'h2a7;
        M_rgb3Counter_d = 10'h2a7;
        M_rgb4Counter_d = 6'h21;
        M_rgb5Counter_d = 10'h2a7;
        M_rgb6Counter_d = 10'h2a7;
        M_rgb7Counter_d = 6'h21;
        M_rgb8Counter_d = 10'h2a7;
      end
      if (M_readWriteStage_q == 1'h1) begin
        M_frameCounter_d = 1'h1;
        M_rgb0Counter_d = 1'h0;
        M_rgb1Counter_d = 6'h21;
        M_rgb2Counter_d = 1'h0;
        M_rgb3Counter_d = 10'h2a7;
        M_rgb4Counter_d = 6'h21;
        M_rgb5Counter_d = 10'h2a7;
        M_rgb6Counter_d = 10'h2a7;
        M_rgb7Counter_d = 10'h286;
        M_rgb8Counter_d = 10'h2a7;
        M_rgb9Counter_d = 10'h2a7;
        M_rgb10Counter_d = 6'h21;
        M_rgb11Counter_d = 10'h2a7;
      end
      if (M_readWriteStage_q == 2'h2) begin
        M_frameCounter_d = 2'h2;
        M_rgb0Counter_d = 10'h2a7;
        M_rgb1Counter_d = 10'h286;
        M_rgb2Counter_d = 10'h2a7;
        M_rgb3Counter_d = 1'h0;
        M_rgb4Counter_d = 6'h21;
        M_rgb5Counter_d = 1'h0;
        M_rgb6Counter_d = 10'h2a7;
        M_rgb7Counter_d = 6'h21;
        M_rgb8Counter_d = 10'h2a7;
        M_rgb9Counter_d = 10'h2a7;
        M_rgb10Counter_d = 6'h21;
        M_rgb11Counter_d = 10'h2a7;
      end
      if (M_readWriteStage_q == 2'h3) begin
        M_frameCounter_d = 4'ha;
        M_rgb9Counter_d = 10'h2a7;
        M_rgb10Counter_d = 6'h21;
        M_rgb11Counter_d = 10'h2a7;
      end
      M_startRoutine_d = 1'h0;
    end
    if (M_readWriteStage_q == 1'h0) begin
      if (M_frameCounter_q == 1'h0) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb0_write_data = M_pixel_q;
            M_rgb0_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb0Counter_d = M_rgb0Counter_q - 1'h1;
            end else begin
              M_rgb0Counter_d = M_rgb0Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb1_write_data = M_pixel_q;
            M_rgb1_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb1Counter_d = M_rgb1Counter_q - 1'h1;
            end else begin
              M_rgb1Counter_d = M_rgb1Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb2_write_data = M_pixel_q;
            M_rgb2_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb2Counter_d = M_rgb2Counter_q - 1'h1;
            end else begin
              M_rgb2Counter_d = M_rgb2Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb0Counter_d = rowStartPixel0;
            M_rgb1Counter_d = rowStartPixel1;
            M_rgb2Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 2'h3;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 2'h3) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb3_write_data = M_pixel_q;
            M_rgb3_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb3Counter_d = M_rgb3Counter_q - 1'h1;
            end else begin
              M_rgb3Counter_d = M_rgb3Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb4_write_data = M_pixel_q;
            M_rgb4_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb4Counter_d = M_rgb4Counter_q - 1'h1;
            end else begin
              M_rgb4Counter_d = M_rgb4Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb5_write_data = M_pixel_q;
            M_rgb5_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb5Counter_d = M_rgb5Counter_q - 1'h1;
            end else begin
              M_rgb5Counter_d = M_rgb5Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb3Counter_d = rowStartPixel0;
            M_rgb4Counter_d = rowStartPixel1;
            M_rgb5Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 3'h5;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 3'h5) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb6_write_data = M_pixel_q;
            M_rgb6_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb6Counter_d = M_rgb6Counter_q - 1'h1;
            end else begin
              M_rgb6Counter_d = M_rgb6Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb7_write_data = M_pixel_q;
            M_rgb7_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb7Counter_d = M_rgb7Counter_q - 1'h1;
            end else begin
              M_rgb7Counter_d = M_rgb7Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb8_write_data = M_pixel_q;
            M_rgb8_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb8Counter_d = M_rgb8Counter_q - 1'h1;
            end else begin
              M_rgb8Counter_d = M_rgb8Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb6Counter_d = rowStartPixel0;
            M_rgb7Counter_d = rowStartPixel1;
            M_rgb8Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frame0Write_d = 1'h1;
          startWritingFlag = 1'h1;
          startWritingFlag3 = 1'h1;
          startWritingFlag5 = 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
        end
      end
      if (M_frame0Write_q == 1'h1) begin
        M_fifo_wput = 1'h0;
        M_fifo_rget = 1'h0;
        M_rgb0_address = writePixelAddress0;
        M_rgb0Counter_d = writePixelAddress0;
        rgbOut0 = M_rgb0_read_data;
        M_rgb1_address = writePixelAddress1;
        M_rgb1Counter_d = writePixelAddress1;
        rgbOut1 = M_rgb1_read_data;
        M_rgb2_address = writePixelAddress2;
        M_rgb2Counter_d = writePixelAddress2;
        rgbOut2 = M_rgb2_read_data;
        M_rgb3_address = writePixelAddress9;
        M_rgb3Counter_d = writePixelAddress9;
        rgbOut9 = M_rgb3_read_data;
        M_rgb4_address = writePixelAddress10;
        M_rgb4Counter_d = writePixelAddress10;
        rgbOut10 = M_rgb4_read_data;
        M_rgb5_address = writePixelAddress11;
        M_rgb5Counter_d = writePixelAddress11;
        rgbOut11 = M_rgb5_read_data;
        M_rgb6_address = writePixelAddress15;
        M_rgb6Counter_d = writePixelAddress15;
        rgbOut15 = M_rgb6_read_data;
        M_rgb7_address = writePixelAddress16;
        M_rgb7Counter_d = writePixelAddress16;
        rgbOut16 = M_rgb7_read_data;
        M_rgb8_address = writePixelAddress17;
        M_rgb8Counter_d = writePixelAddress17;
        rgbOut17 = M_rgb8_read_data;
      end
    end
    if (M_readWriteStage_q == 1'h1) begin
      if (M_frameCounter_q == 1'h1) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb0_write_data = M_pixel_q;
            M_rgb0_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb0Counter_d = M_rgb0Counter_q + 1'h1;
            end else begin
              M_rgb0Counter_d = M_rgb0Counter_q - 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb1_write_data = M_pixel_q;
            M_rgb1_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb1Counter_d = M_rgb1Counter_q - 1'h1;
            end else begin
              M_rgb1Counter_d = M_rgb1Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb2_write_data = M_pixel_q;
            M_rgb2_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb2Counter_d = M_rgb2Counter_q + 1'h1;
            end else begin
              M_rgb2Counter_d = M_rgb2Counter_q - 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb0Counter_d = rowStartPixel3;
            M_rgb1Counter_d = rowStartPixel4;
            M_rgb2Counter_d = rowStartPixel5;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 3'h4;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 3'h4) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb3_write_data = M_pixel_q;
            M_rgb3_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb3Counter_d = M_rgb3Counter_q - 1'h1;
            end else begin
              M_rgb3Counter_d = M_rgb3Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb4_write_data = M_pixel_q;
            M_rgb4_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb4Counter_d = M_rgb4Counter_q - 1'h1;
            end else begin
              M_rgb4Counter_d = M_rgb4Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb5_write_data = M_pixel_q;
            M_rgb5_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb5Counter_d = M_rgb5Counter_q - 1'h1;
            end else begin
              M_rgb5Counter_d = M_rgb5Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb3Counter_d = rowStartPixel0;
            M_rgb4Counter_d = rowStartPixel1;
            M_rgb5Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 3'h7;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 3'h7) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb6_write_data = M_pixel_q;
            M_rgb6_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb6Counter_d = M_rgb6Counter_q - 1'h1;
            end else begin
              M_rgb6Counter_d = M_rgb6Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb7_write_data = M_pixel_q;
            M_rgb7_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb7Counter_d = M_rgb7Counter_q + 1'h1;
            end else begin
              M_rgb7Counter_d = M_rgb7Counter_q - 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb8_write_data = M_pixel_q;
            M_rgb8_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb8Counter_d = M_rgb8Counter_q - 1'h1;
            end else begin
              M_rgb8Counter_d = M_rgb8Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb6Counter_d = rowStartPixel0;
            M_rgb7Counter_d = rowStartPixel7;
            M_rgb8Counter_d = rowStartPixel0;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 4'h9;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 4'h9) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb9_write_data = M_pixel_q;
            M_rgb9_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb9Counter_d = M_rgb9Counter_q - 1'h1;
            end else begin
              M_rgb9Counter_d = M_rgb9Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb10_write_data = M_pixel_q;
            M_rgb10_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb10Counter_d = M_rgb10Counter_q - 1'h1;
            end else begin
              M_rgb10Counter_d = M_rgb10Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb11_write_data = M_pixel_q;
            M_rgb11_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb11Counter_d = M_rgb11Counter_q - 1'h1;
            end else begin
              M_rgb11Counter_d = M_rgb11Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb9Counter_d = rowStartPixel0;
            M_rgb10Counter_d = rowStartPixel1;
            M_rgb11Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frame1Write_d = 1'h1;
          startWritingFlag1 = 1'h1;
          startWritingFlag4 = 1'h1;
          startWritingFlag7 = 1'h1;
          startWritingFlag9 = 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
        end
      end
      if (M_frame1Write_q) begin
        M_fifo_wput = 1'h0;
        M_fifo_rget = 1'h0;
        M_rgb0_address = writePixelAddress3;
        M_rgb0Counter_d = writePixelAddress3;
        rgbOut3 = M_rgb0_read_data;
        M_rgb1_address = writePixelAddress4;
        M_rgb1Counter_d = writePixelAddress4;
        rgbOut4 = M_rgb1_read_data;
        M_rgb2_address = writePixelAddress5;
        M_rgb2Counter_d = writePixelAddress5;
        rgbOut5 = M_rgb2_read_data;
        M_rgb3_address = writePixelAddress12;
        M_rgb3Counter_d = writePixelAddress12;
        rgbOut12 = M_rgb3_read_data;
        M_rgb4_address = writePixelAddress13;
        M_rgb4Counter_d = writePixelAddress13;
        rgbOut13 = M_rgb4_read_data;
        M_rgb5_address = writePixelAddress14;
        M_rgb5Counter_d = writePixelAddress14;
        rgbOut14 = M_rgb5_read_data;
        M_rgb6_address = writePixelAddress21;
        M_rgb6Counter_d = writePixelAddress21;
        rgbOut21 = M_rgb6_read_data;
        M_rgb7_address = writePixelAddress22;
        M_rgb7Counter_d = writePixelAddress22;
        rgbOut22 = M_rgb7_read_data;
        M_rgb8_address = writePixelAddress23;
        M_rgb8Counter_d = writePixelAddress23;
        rgbOut23 = M_rgb8_read_data;
        M_rgb9_address = writePixelAddress27;
        M_rgb9Counter_d = writePixelAddress27;
        rgbOut27 = M_rgb9_read_data;
        M_rgb10_address = writePixelAddress28;
        M_rgb10Counter_d = writePixelAddress28;
        rgbOut28 = M_rgb10_read_data;
        M_rgb11_address = writePixelAddress29;
        M_rgb11Counter_d = writePixelAddress29;
        rgbOut29 = M_rgb11_read_data;
      end
    end
    if (M_readWriteStage_q == 2'h2) begin
      if (M_frameCounter_q == 2'h2) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb0_write_data = M_pixel_q;
            M_rgb0_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb0Counter_d = M_rgb0Counter_q - 1'h1;
            end else begin
              M_rgb0Counter_d = M_rgb0Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb1_write_data = M_pixel_q;
            M_rgb1_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb1Counter_d = M_rgb1Counter_q + 1'h1;
            end else begin
              M_rgb1Counter_d = M_rgb1Counter_q - 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb2_write_data = M_pixel_q;
            M_rgb2_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb2Counter_d = M_rgb2Counter_q - 1'h1;
            end else begin
              M_rgb2Counter_d = M_rgb2Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb0Counter_d = rowStartPixel0;
            M_rgb1Counter_d = rowStartPixel7;
            M_rgb2Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 3'h6;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 3'h6) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb3_write_data = M_pixel_q;
            M_rgb3_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb3Counter_d = M_rgb3Counter_q + 1'h1;
            end else begin
              M_rgb3Counter_d = M_rgb3Counter_q - 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb4_write_data = M_pixel_q;
            M_rgb4_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb4Counter_d = M_rgb4Counter_q - 1'h1;
            end else begin
              M_rgb4Counter_d = M_rgb4Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb5_write_data = M_pixel_q;
            M_rgb5_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb5Counter_d = M_rgb5Counter_q + 1'h1;
            end else begin
              M_rgb5Counter_d = M_rgb5Counter_q - 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb3Counter_d = rowStartPixel3;
            M_rgb4Counter_d = rowStartPixel4;
            M_rgb5Counter_d = rowStartPixel5;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 4'h8;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 4'h8) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb6_write_data = M_pixel_q;
            M_rgb6_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb6Counter_d = M_rgb6Counter_q - 1'h1;
            end else begin
              M_rgb6Counter_d = M_rgb6Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb7_write_data = M_pixel_q;
            M_rgb7_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb7Counter_d = M_rgb7Counter_q - 1'h1;
            end else begin
              M_rgb7Counter_d = M_rgb7Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb8_write_data = M_pixel_q;
            M_rgb8_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb8Counter_d = M_rgb8Counter_q - 1'h1;
            end else begin
              M_rgb8Counter_d = M_rgb8Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb6Counter_d = rowStartPixel0;
            M_rgb7Counter_d = rowStartPixel1;
            M_rgb8Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frameCounter_d = 4'ha;
          M_pixelCounter_d = 1'h0;
          M_columnCounter_d = 1'h0;
          M_rowCounter_d = 1'h1;
          M_newPixelFlag_d = 1'h0;
        end
      end
      if (M_frameCounter_q == 4'ha) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb9_write_data = M_pixel_q;
            M_rgb9_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb9Counter_d = M_rgb9Counter_q - 1'h1;
            end else begin
              M_rgb9Counter_d = M_rgb9Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb10_write_data = M_pixel_q;
            M_rgb10_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb10Counter_d = M_rgb10Counter_q - 1'h1;
            end else begin
              M_rgb10Counter_d = M_rgb10Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb11_write_data = M_pixel_q;
            M_rgb11_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb11Counter_d = M_rgb11Counter_q - 1'h1;
            end else begin
              M_rgb11Counter_d = M_rgb11Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb9Counter_d = rowStartPixel0;
            M_rgb10Counter_d = rowStartPixel1;
            M_rgb11Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frame2Write_d = 1'h1;
          startWritingFlag2 = 1'h1;
          startWritingFlag6 = 1'h1;
          startWritingFlag8 = 1'h1;
          startWritingFlag10 = 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
        end
      end
      if (M_frame2Write_q == 1'h1) begin
        M_rgb0_address = writePixelAddress6;
        M_rgb0Counter_d = writePixelAddress6;
        rgbOut6 = M_rgb0_read_data;
        M_rgb1_address = writePixelAddress7;
        M_rgb1Counter_d = writePixelAddress7;
        rgbOut7 = M_rgb1_read_data;
        M_rgb2_address = writePixelAddress8;
        M_rgb2Counter_d = writePixelAddress8;
        rgbOut8 = M_rgb2_read_data;
        M_rgb3_address = writePixelAddress18;
        M_rgb3Counter_d = writePixelAddress18;
        rgbOut18 = M_rgb3_read_data;
        M_rgb4_address = writePixelAddress19;
        M_rgb4Counter_d = writePixelAddress19;
        rgbOut19 = M_rgb4_read_data;
        M_rgb5_address = writePixelAddress20;
        M_rgb5Counter_d = writePixelAddress20;
        rgbOut20 = M_rgb5_read_data;
        M_rgb6_address = writePixelAddress24;
        M_rgb6Counter_d = writePixelAddress24;
        rgbOut24 = M_rgb6_read_data;
        M_rgb7_address = writePixelAddress25;
        M_rgb7Counter_d = writePixelAddress25;
        rgbOut25 = M_rgb7_read_data;
        M_rgb8_address = writePixelAddress26;
        M_rgb8Counter_d = writePixelAddress26;
        rgbOut26 = M_rgb8_read_data;
        M_rgb9_address = writePixelAddress30;
        M_rgb9Counter_d = writePixelAddress30;
        rgbOut30 = M_rgb9_read_data;
        M_rgb10_address = writePixelAddress31;
        M_rgb10Counter_d = writePixelAddress31;
        rgbOut31 = M_rgb10_read_data;
        M_rgb11_address = writePixelAddress32;
        M_rgb11Counter_d = writePixelAddress32;
        rgbOut32 = M_rgb11_read_data;
      end
    end
    if (M_readWriteStage_q == 2'h3) begin
      if (M_frameCounter_q == 4'ha) begin
        if (!M_fifo_empty && M_newPixelFlag_q == 1'h0) begin
          M_fifo_rget = 1'h1;
          M_pixel_d = M_fifo_dout[0+23-:24];
          M_newPixelFlag_d = 1'h1;
        end
        if (M_newPixelFlag_q == 1'h1) begin
          M_newPixelFlag_d = 2'h2;
          if (M_columnCounter_q < 6'h22) begin
            M_rgb9_write_data = M_pixel_q;
            M_rgb9_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb9Counter_d = M_rgb9Counter_q - 1'h1;
            end else begin
              M_rgb9Counter_d = M_rgb9Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 6'h21 && M_columnCounter_q < 7'h44) begin
            M_rgb10_write_data = M_pixel_q;
            M_rgb10_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb10Counter_d = M_rgb10Counter_q - 1'h1;
            end else begin
              M_rgb10Counter_d = M_rgb10Counter_q + 1'h1;
            end
          end
          if (M_columnCounter_q > 7'h43 && M_columnCounter_q < 7'h66) begin
            M_rgb11_write_data = M_pixel_q;
            M_rgb11_write_en = 1'h1;
            if (M_rowCounter_q[0+0-:1]) begin
              M_rgb11Counter_d = M_rgb11Counter_q - 1'h1;
            end else begin
              M_rgb11Counter_d = M_rgb11Counter_q + 1'h1;
            end
          end
        end
        if (M_newPixelFlag_q == 2'h2) begin
          M_newPixelFlag_d = 1'h0;
          M_columnCounter_d = M_columnCounter_q + 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
          if (M_columnCounter_q == 7'h65) begin
            M_rowCounter_d = M_rowCounter_q + 1'h1;
            M_columnCounter_d = 1'h0;
            M_rgb9Counter_d = rowStartPixel0;
            M_rgb10Counter_d = rowStartPixel1;
            M_rgb11Counter_d = rowStartPixel2;
          end
        end
        if (M_pixelCounter_q == 11'h7f8) begin
          M_frame3Write_d = 1'h1;
          startWritingFlag10 = 1'h1;
          M_pixelCounter_d = M_pixelCounter_q + 1'h1;
        end
      end
      if (M_frame3Write_q == 1'h1) begin
        M_fifo_wput = 1'h0;
        M_fifo_rget = 1'h0;
        M_rgb9_address = writePixelAddress30;
        M_rgb9Counter_d = writePixelAddress30;
        rgbOut30 = M_rgb9_read_data;
        M_rgb10_address = writePixelAddress31;
        M_rgb10Counter_d = writePixelAddress31;
        rgbOut31 = M_rgb10_read_data;
        M_rgb11_address = writePixelAddress32;
        M_rgb11Counter_d = writePixelAddress32;
        rgbOut32 = M_rgb11_read_data;
      end
    end
  end
  
  always @(posedge clk) begin
    M_rgb0Counter_q <= M_rgb0Counter_d;
    M_rgb1Counter_q <= M_rgb1Counter_d;
    M_rgb2Counter_q <= M_rgb2Counter_d;
    M_rgb3Counter_q <= M_rgb3Counter_d;
    M_rgb4Counter_q <= M_rgb4Counter_d;
    M_rgb5Counter_q <= M_rgb5Counter_d;
    M_rgb6Counter_q <= M_rgb6Counter_d;
    M_rgb7Counter_q <= M_rgb7Counter_d;
    M_rgb8Counter_q <= M_rgb8Counter_d;
    M_rgb9Counter_q <= M_rgb9Counter_d;
    M_rgb10Counter_q <= M_rgb10Counter_d;
    M_rgb11Counter_q <= M_rgb11Counter_d;
    M_rowCounter_q <= M_rowCounter_d;
    M_columnCounter_q <= M_columnCounter_d;
    M_pixel_q <= M_pixel_d;
    M_newPixelFlag_q <= M_newPixelFlag_d;
    M_pixelCounter_q <= M_pixelCounter_d;
    M_frameCounter_q <= M_frameCounter_d;
    M_frame0Write_q <= M_frame0Write_d;
    M_frame1Write_q <= M_frame1Write_d;
    M_frame2Write_q <= M_frame2Write_d;
    M_frame3Write_q <= M_frame3Write_d;
    M_readWriteStage_q <= M_readWriteStage_d;
    M_startRoutine_q <= M_startRoutine_d;
  end
  
endmodule
