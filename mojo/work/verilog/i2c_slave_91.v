/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     DEVICE_ID = 7h50
*/
module i2c_slave_91 (
    input clk,
    input rst,
    inout sda,
    input scl,
    output reg start,
    output reg stop,
    output reg write,
    output reg [7:0] rx_data,
    output reg rx_valid,
    output reg next,
    input tx_enable,
    input [7:0] tx_data,
    output reg ack,
    output reg enabled
  );
  
  localparam DEVICE_ID = 7'h50;
  reg [0:0] IO_sda_enable;
  wire [0:0] IO_sda_read;
  reg [0:0] IO_sda_write;
  assign sda = IO_sda_enable ? IO_sda_write : {1{1'bz}};
  assign IO_sda_read = sda;
  
  
  localparam IDLE_state = 4'd0;
  localparam WAIT_ID_state = 4'd1;
  localparam WAIT_STOP_state = 4'd2;
  localparam READ_BYTE_state = 4'd3;
  localparam WRITE_BYTE_state = 4'd4;
  localparam ACK_state = 4'd5;
  localparam ACK_WAIT_state = 4'd6;
  localparam READ_ACK_state = 4'd7;
  localparam READ_ACK_WAIT_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  reg [2:0] M_sda_sync_d, M_sda_sync_q = 1'h0;
  reg [2:0] M_scl_sync_d, M_scl_sync_q = 1'h0;
  reg [2:0] M_bit_ctr_d, M_bit_ctr_q = 1'h0;
  reg [7:0] M_data_d, M_data_q = 1'h0;
  reg M_tx_flag_d, M_tx_flag_q = 1'h0;
  reg M_valid_d, M_valid_q = 1'h0;
  reg M_capture_tx_d, M_capture_tx_q = 1'h0;
  
  reg clk_rise;
  reg clk_fall;
  
  always @* begin
    M_state_d = M_state_q;
    M_capture_tx_d = M_capture_tx_q;
    M_valid_d = M_valid_q;
    M_tx_flag_d = M_tx_flag_q;
    M_data_d = M_data_q;
    M_sda_sync_d = M_sda_sync_q;
    M_bit_ctr_d = M_bit_ctr_q;
    M_scl_sync_d = M_scl_sync_q;
    
    start = 1'h0;
    stop = 1'h0;
    write = 1'h0;
    rx_data = M_data_q;
    rx_valid = M_valid_q;
    next = 1'h0;
    ack = 1'h0;
    IO_sda_enable = 1'h0;
    IO_sda_write = 1'h0;
    M_valid_d = 1'h0;
    enabled = 1'h0;
    M_sda_sync_d = {M_sda_sync_q[0+1-:2], IO_sda_read};
    M_scl_sync_d = {M_scl_sync_q[0+1-:2], scl};
    clk_rise = M_scl_sync_q[1+0-:1] && !M_scl_sync_q[2+0-:1];
    clk_fall = !M_scl_sync_q[1+0-:1] && M_scl_sync_q[2+0-:1];
    
    case (M_state_q)
      WAIT_ID_state: begin
        if (clk_rise) begin
          M_data_d = {M_data_q[0+6-:7], M_sda_sync_q[2+0-:1]};
          M_bit_ctr_d = M_bit_ctr_q + 1'h1;
          if (M_bit_ctr_q == 3'h7) begin
            if (M_data_q[0+6-:7] == 7'h50) begin
              start = 1'h1;
              M_capture_tx_d = 1'h1;
              write = ~M_sda_sync_q[2+0-:1];
              M_state_d = ACK_state;
            end else begin
              M_state_d = WAIT_STOP_state;
            end
          end
        end
      end
      ACK_state: begin
        if (clk_fall) begin
          M_state_d = ACK_WAIT_state;
        end
      end
      ACK_WAIT_state: begin
        if (clk_fall) begin
          M_state_d = M_tx_flag_q ? WRITE_BYTE_state : READ_BYTE_state;
        end
        IO_sda_enable = 1'h1;
        enabled = 1'h1;
      end
      READ_BYTE_state: begin
        if (clk_rise) begin
          M_data_d = {M_data_q[0+6-:7], M_sda_sync_q[2+0-:1]};
          M_bit_ctr_d = M_bit_ctr_q + 1'h1;
          if (M_bit_ctr_q == 3'h7) begin
            M_state_d = ACK_state;
            next = 1'h1;
            M_capture_tx_d = 1'h1;
            M_valid_d = 1'h1;
          end
        end
      end
      WRITE_BYTE_state: begin
        IO_sda_enable = ~M_data_q[7+0-:1];
        enabled = ~M_data_q[7+0-:1];
        if (clk_fall) begin
          M_bit_ctr_d = M_bit_ctr_q + 1'h1;
          M_data_d = {M_data_q[0+6-:7], 1'bx};
          if (M_bit_ctr_q == 3'h7) begin
            M_state_d = READ_ACK_state;
          end
        end
      end
      READ_ACK_state: begin
        if (clk_rise) begin
          ack = M_sda_sync_q[2+0-:1];
          next = 1'h1;
          M_capture_tx_d = 1'h1;
          M_state_d = READ_ACK_WAIT_state;
        end
      end
      READ_ACK_WAIT_state: begin
        if (clk_fall) begin
          M_state_d = M_tx_flag_q ? WRITE_BYTE_state : READ_BYTE_state;
        end
      end
    endcase
    if (M_capture_tx_q) begin
      M_capture_tx_d = 1'h0;
      M_tx_flag_d = tx_enable;
      if (tx_enable) begin
        M_data_d = tx_data;
      end
    end
    if (M_scl_sync_q[2+0-:1]) begin
      if (M_sda_sync_q[2+0-:1] && !M_sda_sync_q[1+0-:1]) begin
        M_state_d = WAIT_ID_state;
        M_bit_ctr_d = 1'h0;
      end else begin
        if (!M_sda_sync_q[2+0-:1] && M_sda_sync_q[1+0-:1]) begin
          M_state_d = IDLE_state;
          stop = 1'h1;
        end
      end
    end
  end
  
  always @(posedge clk) begin
    M_sda_sync_q <= M_sda_sync_d;
    M_scl_sync_q <= M_scl_sync_d;
    M_bit_ctr_q <= M_bit_ctr_d;
    M_data_q <= M_data_d;
    M_tx_flag_q <= M_tx_flag_d;
    M_valid_q <= M_valid_d;
    M_capture_tx_q <= M_capture_tx_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
