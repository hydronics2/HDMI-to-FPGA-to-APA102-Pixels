/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     CLK_FREQ = 75000000
     TOKEN_CTR_SIZE = 7
*/
module bit_align_102 (
    input clk,
    input rst,
    input [9:0] data,
    output reg flip,
    output reg bitslip,
    output reg aligned
  );
  
  localparam CLK_FREQ = 27'h47868c0;
  localparam TOKEN_CTR_SIZE = 3'h7;
  
  
  reg blank;
  
  localparam INIT_state = 3'd0;
  localparam SEARCH_state = 3'd1;
  localparam BITSLIP_state = 3'd2;
  localparam RX_TOKEN_state = 3'd3;
  localparam ALIGNED_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = INIT_state;
  reg [1:0] M_ctrl_rx_d, M_ctrl_rx_q = 1'h0;
  reg [19:0] M_search_ctr_d, M_search_ctr_q = 1'h0;
  reg [6:0] M_token_ctr_d, M_token_ctr_q = 1'h0;
  reg [2:0] M_bitslip_ctr_d, M_bitslip_ctr_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_search_ctr_d = M_search_ctr_q;
    M_bitslip_ctr_d = M_bitslip_ctr_q;
    M_token_ctr_d = M_token_ctr_q;
    M_ctrl_rx_d = M_ctrl_rx_q;
    
    flip = M_bitslip_ctr_q[2+0-:1];
    bitslip = 1'h0;
    aligned = M_state_q == ALIGNED_state;
    M_ctrl_rx_d[0+0-:1] = (data == 10'h354) || (data == 10'h0ab) || (data == 10'h154) || (data == 10'h2ab);
    M_ctrl_rx_d[1+0-:1] = M_ctrl_rx_q[0+0-:1];
    blank = M_ctrl_rx_q == 2'h1;
    M_search_ctr_d = M_search_ctr_q + 1'h1;
    M_token_ctr_d = 1'h0;
    
    case (M_state_q)
      INIT_state: begin
        M_bitslip_ctr_d = 1'h0;
        if ((&M_search_ctr_q)) begin
          M_state_d = SEARCH_state;
        end
      end
      SEARCH_state: begin
        if (blank) begin
          M_state_d = RX_TOKEN_state;
        end else begin
          if ((&M_search_ctr_q)) begin
            M_state_d = BITSLIP_state;
          end
        end
      end
      BITSLIP_state: begin
        bitslip = 1'h1;
        M_bitslip_ctr_d = M_bitslip_ctr_q + 1'h1;
        M_search_ctr_d = 1'h0;
        M_state_d = SEARCH_state;
      end
      RX_TOKEN_state: begin
        M_token_ctr_d = M_token_ctr_q + 1'h1;
        if (M_ctrl_rx_q[0+0-:1]) begin
          if ((&M_token_ctr_q)) begin
            M_state_d = ALIGNED_state;
          end
        end else begin
          M_search_ctr_d = 1'h0;
          M_state_d = SEARCH_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_ctrl_rx_q <= M_ctrl_rx_d;
    M_search_ctr_q <= M_search_ctr_d;
    M_token_ctr_q <= M_token_ctr_d;
    M_bitslip_ctr_q <= M_bitslip_ctr_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
