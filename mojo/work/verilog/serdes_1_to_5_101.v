/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module serdes_1_to_5_101 (
    input data_p,
    input data_n,
    input ioclk,
    input strobe,
    input rst,
    input gclk,
    input bitslip,
    output reg [4:0] data
  );
  
  
  
  localparam INIT_state = 3'd0;
  localparam CAL_state = 3'd1;
  localparam WAIT_CAL_state = 3'd2;
  localparam WAIT_RESET_state = 3'd3;
  localparam WAIT_ENABLE_state = 3'd4;
  localparam CAL_SLAVE_state = 3'd5;
  localparam WAIT_CAL_SLAVE_START_state = 3'd6;
  localparam WAIT_ALL_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = INIT_state;
  reg M_io_init_d, M_io_init_q = 1'h0;
  reg [8:0] M_ctr_d, M_ctr_q = 1'h0;
  reg [4:0] M_pdctr_d, M_pdctr_q = 5'h10;
  reg M_flag_d, M_flag_q = 1'h0;
  
  wire [1-1:0] M_bufds_O;
  IBUFDS bufds (
    .I(data_p),
    .IB(data_n),
    .O(M_bufds_O)
  );
  
  wire [1-1:0] M_io_master_BUSY;
  wire [1-1:0] M_io_master_DATAOUT;
  wire [1-1:0] M_io_master_DATAOUT2;
  wire [1-1:0] M_io_master_TOUT;
  wire [1-1:0] M_io_master_DOUT;
  reg [1-1:0] M_io_master_IDATAIN;
  reg [1-1:0] M_io_master_T;
  reg [1-1:0] M_io_master_ODATAIN;
  reg [1-1:0] M_io_master_CAL;
  reg [1-1:0] M_io_master_INC;
  reg [1-1:0] M_io_master_CE;
  reg [1-1:0] M_io_master_RST;
  IODELAY2 #(.DATA_RATE("SDR"), .IDELAY_VALUE(0), .IDELAY2_VALUE(0), .IDELAY_MODE("NORMAL"), .ODELAY_VALUE(0), .IDELAY_TYPE("DIFF_PHASE_DETECTOR"), .COUNTER_WRAPAROUND("STAY_AT_LIMIT"), .DELAY_SRC("IDATAIN"), .SERDES_MODE("MASTER")) io_master (
    .CLK(gclk),
    .IOCLK0(ioclk),
    .IOCLK1(1'h0),
    .IDATAIN(M_io_master_IDATAIN),
    .T(M_io_master_T),
    .ODATAIN(M_io_master_ODATAIN),
    .CAL(M_io_master_CAL),
    .INC(M_io_master_INC),
    .CE(M_io_master_CE),
    .RST(M_io_master_RST),
    .BUSY(M_io_master_BUSY),
    .DATAOUT(M_io_master_DATAOUT),
    .DATAOUT2(M_io_master_DATAOUT2),
    .TOUT(M_io_master_TOUT),
    .DOUT(M_io_master_DOUT)
  );
  
  wire [1-1:0] M_io_slave_BUSY;
  wire [1-1:0] M_io_slave_DATAOUT;
  wire [1-1:0] M_io_slave_DATAOUT2;
  wire [1-1:0] M_io_slave_TOUT;
  wire [1-1:0] M_io_slave_DOUT;
  reg [1-1:0] M_io_slave_IDATAIN;
  reg [1-1:0] M_io_slave_T;
  reg [1-1:0] M_io_slave_ODATAIN;
  reg [1-1:0] M_io_slave_CAL;
  reg [1-1:0] M_io_slave_INC;
  reg [1-1:0] M_io_slave_CE;
  reg [1-1:0] M_io_slave_RST;
  IODELAY2 #(.DATA_RATE("SDR"), .IDELAY_VALUE(0), .IDELAY2_VALUE(0), .IDELAY_MODE("NORMAL"), .ODELAY_VALUE(0), .IDELAY_TYPE("DIFF_PHASE_DETECTOR"), .COUNTER_WRAPAROUND("WRAPAROUND"), .DELAY_SRC("IDATAIN"), .SERDES_MODE("SLAVE")) io_slave (
    .CLK(gclk),
    .IOCLK0(ioclk),
    .IOCLK1(1'h0),
    .IDATAIN(M_io_slave_IDATAIN),
    .T(M_io_slave_T),
    .ODATAIN(M_io_slave_ODATAIN),
    .CAL(M_io_slave_CAL),
    .INC(M_io_slave_INC),
    .CE(M_io_slave_CE),
    .RST(M_io_slave_RST),
    .BUSY(M_io_slave_BUSY),
    .DATAOUT(M_io_slave_DATAOUT),
    .DATAOUT2(M_io_slave_DATAOUT2),
    .TOUT(M_io_slave_TOUT),
    .DOUT(M_io_slave_DOUT)
  );
  
  wire [1-1:0] M_serdes_master_CFB0;
  wire [1-1:0] M_serdes_master_CFB1;
  wire [1-1:0] M_serdes_master_DFB;
  wire [1-1:0] M_serdes_master_SHIFTOUT;
  wire [1-1:0] M_serdes_master_FABRICOUT;
  wire [1-1:0] M_serdes_master_Q1;
  wire [1-1:0] M_serdes_master_Q2;
  wire [1-1:0] M_serdes_master_Q3;
  wire [1-1:0] M_serdes_master_Q4;
  wire [1-1:0] M_serdes_master_VALID;
  wire [1-1:0] M_serdes_master_INCDEC;
  reg [1-1:0] M_serdes_master_CE0;
  reg [1-1:0] M_serdes_master_BITSLIP;
  reg [1-1:0] M_serdes_master_IOCE;
  reg [1-1:0] M_serdes_master_SHIFTIN;
  ISERDES2 #(.DATA_WIDTH(5), .DATA_RATE("SDR"), .BITSLIP_ENABLE("TRUE"), .SERDES_MODE("MASTER"), .INTERFACE_TYPE("RETIMED")) serdes_master (
    .CLK0(ioclk),
    .CLK1(1'h0),
    .RST(rst),
    .CLKDIV(gclk),
    .D(M_io_master_DATAOUT),
    .CE0(M_serdes_master_CE0),
    .BITSLIP(M_serdes_master_BITSLIP),
    .IOCE(M_serdes_master_IOCE),
    .SHIFTIN(M_serdes_master_SHIFTIN),
    .CFB0(M_serdes_master_CFB0),
    .CFB1(M_serdes_master_CFB1),
    .DFB(M_serdes_master_DFB),
    .SHIFTOUT(M_serdes_master_SHIFTOUT),
    .FABRICOUT(M_serdes_master_FABRICOUT),
    .Q1(M_serdes_master_Q1),
    .Q2(M_serdes_master_Q2),
    .Q3(M_serdes_master_Q3),
    .Q4(M_serdes_master_Q4),
    .VALID(M_serdes_master_VALID),
    .INCDEC(M_serdes_master_INCDEC)
  );
  
  wire [1-1:0] M_serdes_slave_CFB0;
  wire [1-1:0] M_serdes_slave_CFB1;
  wire [1-1:0] M_serdes_slave_DFB;
  wire [1-1:0] M_serdes_slave_SHIFTOUT;
  wire [1-1:0] M_serdes_slave_FABRICOUT;
  wire [1-1:0] M_serdes_slave_Q1;
  wire [1-1:0] M_serdes_slave_Q2;
  wire [1-1:0] M_serdes_slave_Q3;
  wire [1-1:0] M_serdes_slave_Q4;
  wire [1-1:0] M_serdes_slave_VALID;
  wire [1-1:0] M_serdes_slave_INCDEC;
  reg [1-1:0] M_serdes_slave_CE0;
  reg [1-1:0] M_serdes_slave_BITSLIP;
  reg [1-1:0] M_serdes_slave_IOCE;
  reg [1-1:0] M_serdes_slave_SHIFTIN;
  ISERDES2 #(.DATA_WIDTH(5), .DATA_RATE("SDR"), .BITSLIP_ENABLE("TRUE"), .SERDES_MODE("SLAVE"), .INTERFACE_TYPE("RETIMED")) serdes_slave (
    .CLK0(ioclk),
    .CLK1(1'h0),
    .RST(rst),
    .CLKDIV(gclk),
    .D(M_io_slave_DATAOUT),
    .CE0(M_serdes_slave_CE0),
    .BITSLIP(M_serdes_slave_BITSLIP),
    .IOCE(M_serdes_slave_IOCE),
    .SHIFTIN(M_serdes_slave_SHIFTIN),
    .CFB0(M_serdes_slave_CFB0),
    .CFB1(M_serdes_slave_CFB1),
    .DFB(M_serdes_slave_DFB),
    .SHIFTOUT(M_serdes_slave_SHIFTOUT),
    .FABRICOUT(M_serdes_slave_FABRICOUT),
    .Q1(M_serdes_slave_Q1),
    .Q2(M_serdes_slave_Q2),
    .Q3(M_serdes_slave_Q3),
    .Q4(M_serdes_slave_Q4),
    .VALID(M_serdes_slave_VALID),
    .INCDEC(M_serdes_slave_INCDEC)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_flag_d = M_flag_q;
    M_io_init_d = M_io_init_q;
    M_pdctr_d = M_pdctr_q;
    M_ctr_d = M_ctr_q;
    
    M_io_master_RST = 1'h0;
    M_io_slave_RST = 1'h0;
    M_io_master_T = 1'h1;
    M_io_slave_T = 1'h1;
    M_io_master_INC = 1'h0;
    M_io_slave_INC = 1'h0;
    M_io_master_CE = 1'h0;
    M_io_slave_CE = 1'h0;
    M_io_master_CAL = 1'h0;
    M_io_slave_CAL = 1'h0;
    M_io_master_ODATAIN = 1'h0;
    M_io_slave_ODATAIN = 1'h0;
    M_io_master_IDATAIN = M_bufds_O;
    M_io_slave_IDATAIN = M_bufds_O;
    M_serdes_master_CE0 = 1'h1;
    M_serdes_slave_CE0 = 1'h1;
    M_serdes_master_IOCE = strobe;
    M_serdes_slave_IOCE = strobe;
    M_serdes_master_SHIFTIN = M_serdes_slave_SHIFTOUT;
    M_serdes_slave_SHIFTIN = M_serdes_master_SHIFTOUT;
    M_serdes_master_BITSLIP = bitslip;
    M_serdes_slave_BITSLIP = bitslip;
    data = {M_serdes_master_Q4, M_serdes_master_Q3, M_serdes_master_Q2, M_serdes_master_Q1, M_serdes_slave_Q4};
    M_ctr_d = M_ctr_q + 1'h1;
    if (M_ctr_q[5+0-:1]) begin
      M_io_init_d = 1'h1;
    end
    if (M_ctr_q[8+0-:1]) begin
      M_ctr_d = 1'h0;
    end
    
    case (M_state_q)
      INIT_state: begin
        if (M_io_init_q) begin
          M_state_d = CAL_state;
        end
      end
      CAL_state: begin
        M_io_master_CAL = 1'h1;
        M_io_slave_CAL = 1'h1;
        if (M_io_slave_BUSY == 1'h1) begin
          M_state_d = WAIT_CAL_state;
        end
      end
      WAIT_CAL_state: begin
        if (M_io_slave_BUSY == 1'h0) begin
          M_io_master_RST = 1'h1;
          M_io_slave_RST = 1'h1;
          M_state_d = WAIT_RESET_state;
        end
      end
      WAIT_RESET_state: begin
        if (M_io_slave_BUSY == 1'h0) begin
          M_state_d = WAIT_ENABLE_state;
        end
      end
      WAIT_ENABLE_state: begin
        if (M_ctr_q[8+0-:1]) begin
          M_state_d = CAL_SLAVE_state;
        end
      end
      CAL_SLAVE_state: begin
        if (M_io_slave_BUSY == 1'h0) begin
          M_io_slave_CAL = 1'h1;
          M_state_d = WAIT_CAL_SLAVE_START_state;
        end
      end
      WAIT_CAL_SLAVE_START_state: begin
        if (M_io_slave_BUSY) begin
          M_state_d = WAIT_ALL_state;
        end
      end
      WAIT_ALL_state: begin
        if (M_io_slave_BUSY == 1'h0) begin
          M_state_d = WAIT_ENABLE_state;
        end
      end
    endcase
    if (M_serdes_master_VALID) begin
      if (M_serdes_master_INCDEC && !(&M_pdctr_q)) begin
        M_pdctr_d = M_pdctr_q + 1'h1;
      end else begin
        if (!M_serdes_master_INCDEC && (|M_pdctr_q)) begin
          M_pdctr_d = M_pdctr_q - 1'h1;
        end
      end
    end
    if (M_state_q == WAIT_ALL_state) begin
      M_flag_d = 1'h0;
    end else begin
      if (M_state_q != WAIT_ENABLE_state || M_io_slave_BUSY) begin
        M_pdctr_d = 5'h10;
      end else begin
        if ((&M_pdctr_q) && !M_flag_q) begin
          M_pdctr_d = 5'h10;
          M_io_master_CE = 1'h1;
          M_io_slave_CE = 1'h1;
          M_io_master_INC = 1'h1;
          M_io_slave_INC = 1'h1;
          M_flag_d = 1'h1;
        end else begin
          if (!(|M_pdctr_q) && !M_flag_q) begin
            M_pdctr_d = 5'h10;
            M_io_master_CE = 1'h1;
            M_io_slave_CE = 1'h1;
            M_io_master_INC = 1'h0;
            M_io_slave_INC = 1'h0;
            M_flag_d = 1'h1;
          end
        end
      end
    end
  end
  
  always @(posedge gclk) begin
    if (rst == 1'b1) begin
      M_io_init_q <= 1'h0;
      M_ctr_q <= 1'h0;
      M_pdctr_q <= 5'h10;
      M_flag_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_io_init_q <= M_io_init_d;
      M_ctr_q <= M_ctr_d;
      M_pdctr_q <= M_pdctr_d;
      M_flag_q <= M_flag_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
