/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module hdmi_to_fifo_2 (
    input rst,
    input [3:0] tmds,
    input [3:0] tmdsb,
    output reg printSomething,
    output reg [7:0] redOut,
    output reg [7:0] greenOut,
    output reg [7:0] blueOut,
    output reg writeFifo,
    output reg hdmiClk,
    output reg hdmi_vsyncFlag,
    output reg [23:0] pixelNumber,
    output reg [1:0] globalReadWriteStageFlag,
    output reg out
  );
  
  
  
  localparam X_START = 6'h28;
  
  localparam Y_START = 5'h1e;
  
  localparam X_LENGTH = 7'h66;
  
  localparam Y_LENGTH = 8'hdc;
  
  wire [1-1:0] M_hdmi_in_pll_locked;
  wire [1-1:0] M_hdmi_in_pclk;
  wire [1-1:0] M_hdmi_in_pclkx2;
  wire [1-1:0] M_hdmi_in_pclkx10;
  wire [1-1:0] M_hdmi_in_strobe;
  wire [1-1:0] M_hdmi_in_hsync;
  wire [1-1:0] M_hdmi_in_vsync;
  wire [1-1:0] M_hdmi_in_de;
  wire [8-1:0] M_hdmi_in_red;
  wire [8-1:0] M_hdmi_in_green;
  wire [8-1:0] M_hdmi_in_blue;
  reg [4-1:0] M_hdmi_in_tmds;
  reg [4-1:0] M_hdmi_in_tmdsb;
  dvi_decoder_73 hdmi_in (
    .rst(rst),
    .tmds(M_hdmi_in_tmds),
    .tmdsb(M_hdmi_in_tmdsb),
    .pll_locked(M_hdmi_in_pll_locked),
    .pclk(M_hdmi_in_pclk),
    .pclkx2(M_hdmi_in_pclkx2),
    .pclkx10(M_hdmi_in_pclkx10),
    .strobe(M_hdmi_in_strobe),
    .hsync(M_hdmi_in_hsync),
    .vsync(M_hdmi_in_vsync),
    .de(M_hdmi_in_de),
    .red(M_hdmi_in_red),
    .green(M_hdmi_in_green),
    .blue(M_hdmi_in_blue)
  );
  
  reg [10:0] M_x_ctr_d, M_x_ctr_q = 1'h0;
  reg [10:0] M_y_ctr_d, M_y_ctr_q = 1'h0;
  reg [7:0] M_xAxis_d, M_xAxis_q = 1'h0;
  reg [23:0] M_pixelCounter_d, M_pixelCounter_q = 1'h0;
  reg [3:0] M_frameCounter_d, M_frameCounter_q = 1'h0;
  reg [2:0] M_readWriteStage_d, M_readWriteStage_q = 1'h0;
  
  always @* begin
    M_x_ctr_d = M_x_ctr_q;
    M_pixelCounter_d = M_pixelCounter_q;
    M_xAxis_d = M_xAxis_q;
    M_y_ctr_d = M_y_ctr_q;
    M_frameCounter_d = M_frameCounter_q;
    M_readWriteStage_d = M_readWriteStage_q;
    
    out = 1'h0;
    redOut = 1'h0;
    greenOut = 1'h0;
    blueOut = 1'h0;
    writeFifo = 1'h0;
    pixelNumber = M_pixelCounter_q;
    printSomething = 1'h0;
    hdmi_vsyncFlag = 1'h0;
    hdmiClk = M_hdmi_in_pclk;
    M_hdmi_in_tmds = tmds;
    M_hdmi_in_tmdsb = tmdsb;
    redOut = M_hdmi_in_red;
    greenOut = M_hdmi_in_green;
    blueOut = M_hdmi_in_blue;
    globalReadWriteStageFlag = M_readWriteStage_q;
    if (M_hdmi_in_vsync) begin
      M_x_ctr_d = 1'h0;
      M_y_ctr_d = 1'h0;
      M_pixelCounter_d = 1'h0;
      hdmi_vsyncFlag = 1'h1;
    end
    if (M_hdmi_in_hsync) begin
      M_x_ctr_d = 1'h0;
    end
    if (M_hdmi_in_de) begin
      M_x_ctr_d = M_x_ctr_q + 1'h1;
    end
    if (M_x_ctr_q == 1'h1 && M_hdmi_in_de) begin
      M_y_ctr_d = M_y_ctr_q + 1'h1;
    end
    if (M_x_ctr_q >= 6'h28 && M_y_ctr_q >= 5'h1e && M_hdmi_in_de) begin
      if (M_xAxis_q < 7'h66) begin
        M_xAxis_d = M_xAxis_q + 1'h1;
        M_pixelCounter_d = M_pixelCounter_q + 1'h1;
        if (M_readWriteStage_q == 1'h0) begin
          if (M_frameCounter_q == 1'h0) begin
            if (M_pixelCounter_q < 11'h7f8) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 13'h1770 && M_pixelCounter_q < 13'h1fe0) begin
            M_frameCounter_d = 2'h3;
          end
          if (M_frameCounter_q == 2'h3) begin
            if (M_pixelCounter_q > 13'h17e7 && M_pixelCounter_q < 13'h1fe0) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 14'h2710 && M_pixelCounter_q < 14'h2fd0) begin
            M_frameCounter_d = 3'h5;
          end
          if (M_frameCounter_q == 3'h5) begin
            if (M_pixelCounter_q > 14'h27d7 && M_pixelCounter_q < 14'h2fd0) begin
              writeFifo = 1'h1;
            end
          end
        end
        if (M_readWriteStage_q == 1'h1) begin
          if (M_frameCounter_q == 1'h1) begin
            if (M_pixelCounter_q > 11'h7f7 && M_pixelCounter_q < 12'hff0) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 13'h1f40 && M_pixelCounter_q < 14'h27d8) begin
            M_frameCounter_d = 3'h4;
          end
          if (M_frameCounter_q == 3'h4) begin
            if (M_pixelCounter_q > 13'h1fdf && M_pixelCounter_q < 14'h27d8) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 14'h3778 && M_pixelCounter_q < 14'h3fc0) begin
            M_frameCounter_d = 3'h7;
          end
          if (M_frameCounter_q == 3'h7) begin
            if (M_pixelCounter_q > 14'h37c7 && M_pixelCounter_q < 14'h3fc0) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 15'h4650 && M_pixelCounter_q < 15'h4fb0) begin
            M_frameCounter_d = 4'h9;
          end
          if (M_frameCounter_q == 4'h9) begin
            if (M_pixelCounter_q > 15'h47b7 && M_pixelCounter_q < 15'h4fb0) begin
              writeFifo = 1'h1;
            end
          end
        end
        if (M_readWriteStage_q == 2'h2) begin
          if (M_pixelCounter_q > 12'hfa0 && M_pixelCounter_q < 13'h17e8) begin
            M_frameCounter_d = 2'h2;
          end
          if (M_frameCounter_q == 2'h2) begin
            if (M_pixelCounter_q > 12'hfef && M_pixelCounter_q < 13'h17e8) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 14'h2ee0 && M_pixelCounter_q < 14'h37c8) begin
            M_frameCounter_d = 3'h6;
          end
          if (M_frameCounter_q == 3'h6) begin
            if (M_pixelCounter_q > 14'h2fcf && M_pixelCounter_q < 14'h37c8) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 14'h3fac && M_pixelCounter_q < 15'h47b8) begin
            M_frameCounter_d = 4'h8;
          end
          if (M_frameCounter_q == 4'h8) begin
            if (M_pixelCounter_q > 14'h3fbf && M_pixelCounter_q < 15'h47b8) begin
              writeFifo = 1'h1;
            end
          end
          if (M_pixelCounter_q > 15'h4f4c && M_pixelCounter_q < 15'h57a8) begin
            M_frameCounter_d = 4'ha;
          end
          if (M_frameCounter_q == 4'ha) begin
            if (M_pixelCounter_q > 15'h4faf && M_pixelCounter_q < 15'h57a8) begin
              writeFifo = 1'h1;
            end
          end
        end
        if (M_readWriteStage_q == 2'h3) begin
          if (M_frameCounter_q == 4'ha) begin
            if (M_pixelCounter_q > 15'h4faf && M_pixelCounter_q < 15'h57a8) begin
              writeFifo = 1'h1;
            end
          end
        end
      end
    end
    if (M_pixelCounter_q == 17'h124f8) begin
      M_readWriteStage_d = M_readWriteStage_q + 1'h1;
      M_pixelCounter_d = M_pixelCounter_q + 1'h1;
    end
    if (M_pixelCounter_q > 17'h124f8) begin
      if (M_readWriteStage_q == 2'h3) begin
        M_readWriteStage_d = 1'h0;
      end
      if (M_readWriteStage_q == 1'h0) begin
        M_frameCounter_d = 1'h0;
      end
      if (M_readWriteStage_q == 1'h1) begin
        M_frameCounter_d = 1'h1;
      end
      if (M_readWriteStage_q == 2'h2) begin
        M_frameCounter_d = 2'h2;
      end
      globalReadWriteStageFlag = M_readWriteStage_q;
    end
    if (!M_hdmi_in_de) begin
      M_xAxis_d = 1'h0;
    end
  end
  
  always @(posedge M_hdmi_in_pclk) begin
    M_x_ctr_q <= M_x_ctr_d;
    M_y_ctr_q <= M_y_ctr_d;
    M_xAxis_q <= M_xAxis_d;
    M_pixelCounter_q <= M_pixelCounter_d;
    M_frameCounter_q <= M_frameCounter_d;
    M_readWriteStage_q <= M_readWriteStage_d;
  end
  
endmodule
