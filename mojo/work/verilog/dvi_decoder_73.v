/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module dvi_decoder_73 (
    input [3:0] tmds,
    input [3:0] tmdsb,
    input rst,
    output reg pll_locked,
    output reg pclk,
    output reg pclkx2,
    output reg pclkx10,
    output reg strobe,
    output reg hsync,
    output reg vsync,
    output reg de,
    output reg [7:0] red,
    output reg [7:0] green,
    output reg [7:0] blue
  );
  
  
  
  wire [1-1:0] M_bufds_O;
  IBUFDS bufds (
    .I(tmds[3+0-:1]),
    .IB(tmdsb[3+0-:1]),
    .O(M_bufds_O)
  );
  
  reg fbout;
  
  wire [1-1:0] M_pll_CLKOUT0;
  wire [1-1:0] M_pll_CLKOUT1;
  wire [1-1:0] M_pll_CLKOUT2;
  wire [1-1:0] M_pll_CLKOUT3;
  wire [1-1:0] M_pll_CLKOUT4;
  wire [1-1:0] M_pll_CLKOUT5;
  wire [1-1:0] M_pll_CLKFBOUT;
  wire [1-1:0] M_pll_LOCKED;
  PLL_BASE #(.CLKIN_PERIOD(13), .CLKFBOUT_MULT(10), .CLKOUT0_DIVIDE(1), .CLKOUT1_DIVIDE(10), .CLKOUT2_DIVIDE(5), .COMPENSATION("INTERNAL")) pll (
    .CLKIN(M_bufds_O),
    .RST(rst),
    .CLKFBIN(fbout),
    .CLKOUT0(M_pll_CLKOUT0),
    .CLKOUT1(M_pll_CLKOUT1),
    .CLKOUT2(M_pll_CLKOUT2),
    .CLKOUT3(M_pll_CLKOUT3),
    .CLKOUT4(M_pll_CLKOUT4),
    .CLKOUT5(M_pll_CLKOUT5),
    .CLKFBOUT(M_pll_CLKFBOUT),
    .LOCKED(M_pll_LOCKED)
  );
  
  always @* begin
    fbout = M_pll_CLKFBOUT;
  end
  
  wire [1-1:0] M_pclkbufg_O;
  BUFG pclkbufg (
    .I(M_pll_CLKOUT1),
    .O(M_pclkbufg_O)
  );
  
  wire [1-1:0] M_pclkx2bufg_O;
  BUFG pclkx2bufg (
    .I(M_pll_CLKOUT2),
    .O(M_pclkx2bufg_O)
  );
  
  wire [1-1:0] M_bufpll_IOCLK;
  wire [1-1:0] M_bufpll_SERDESSTROBE;
  wire [1-1:0] M_bufpll_LOCK;
  BUFPLL #(.DIVIDE(5)) bufpll (
    .PLLIN(M_pll_CLKOUT0),
    .GCLK(M_pclkx2bufg_O),
    .LOCKED(M_pll_LOCKED),
    .IOCLK(M_bufpll_IOCLK),
    .SERDESSTROBE(M_bufpll_SERDESSTROBE),
    .LOCK(M_bufpll_LOCK)
  );
  
  wire [1-1:0] M_dec_r_valid;
  wire [1-1:0] M_dec_r_ready;
  wire [1-1:0] M_dec_r_c0;
  wire [1-1:0] M_dec_r_c1;
  wire [1-1:0] M_dec_r_de;
  wire [8-1:0] M_dec_r_data;
  reg [1-1:0] M_dec_r_data_p;
  reg [1-1:0] M_dec_r_data_n;
  reg [1-1:0] M_dec_r_others_valid;
  reg [1-1:0] M_dec_r_others_ready;
  tmds_decoder_97 dec_r (
    .rst(!M_bufpll_LOCK),
    .pclk(M_pclkbufg_O),
    .pclkx2(M_pclkx2bufg_O),
    .pclkx10(M_bufpll_IOCLK),
    .strobe(M_bufpll_SERDESSTROBE),
    .data_p(M_dec_r_data_p),
    .data_n(M_dec_r_data_n),
    .others_valid(M_dec_r_others_valid),
    .others_ready(M_dec_r_others_ready),
    .valid(M_dec_r_valid),
    .ready(M_dec_r_ready),
    .c0(M_dec_r_c0),
    .c1(M_dec_r_c1),
    .de(M_dec_r_de),
    .data(M_dec_r_data)
  );
  wire [1-1:0] M_dec_g_valid;
  wire [1-1:0] M_dec_g_ready;
  wire [1-1:0] M_dec_g_c0;
  wire [1-1:0] M_dec_g_c1;
  wire [1-1:0] M_dec_g_de;
  wire [8-1:0] M_dec_g_data;
  reg [1-1:0] M_dec_g_data_p;
  reg [1-1:0] M_dec_g_data_n;
  reg [1-1:0] M_dec_g_others_valid;
  reg [1-1:0] M_dec_g_others_ready;
  tmds_decoder_97 dec_g (
    .rst(!M_bufpll_LOCK),
    .pclk(M_pclkbufg_O),
    .pclkx2(M_pclkx2bufg_O),
    .pclkx10(M_bufpll_IOCLK),
    .strobe(M_bufpll_SERDESSTROBE),
    .data_p(M_dec_g_data_p),
    .data_n(M_dec_g_data_n),
    .others_valid(M_dec_g_others_valid),
    .others_ready(M_dec_g_others_ready),
    .valid(M_dec_g_valid),
    .ready(M_dec_g_ready),
    .c0(M_dec_g_c0),
    .c1(M_dec_g_c1),
    .de(M_dec_g_de),
    .data(M_dec_g_data)
  );
  wire [1-1:0] M_dec_b_valid;
  wire [1-1:0] M_dec_b_ready;
  wire [1-1:0] M_dec_b_c0;
  wire [1-1:0] M_dec_b_c1;
  wire [1-1:0] M_dec_b_de;
  wire [8-1:0] M_dec_b_data;
  reg [1-1:0] M_dec_b_data_p;
  reg [1-1:0] M_dec_b_data_n;
  reg [1-1:0] M_dec_b_others_valid;
  reg [1-1:0] M_dec_b_others_ready;
  tmds_decoder_97 dec_b (
    .rst(!M_bufpll_LOCK),
    .pclk(M_pclkbufg_O),
    .pclkx2(M_pclkx2bufg_O),
    .pclkx10(M_bufpll_IOCLK),
    .strobe(M_bufpll_SERDESSTROBE),
    .data_p(M_dec_b_data_p),
    .data_n(M_dec_b_data_n),
    .others_valid(M_dec_b_others_valid),
    .others_ready(M_dec_b_others_ready),
    .valid(M_dec_b_valid),
    .ready(M_dec_b_ready),
    .c0(M_dec_b_c0),
    .c1(M_dec_b_c1),
    .de(M_dec_b_de),
    .data(M_dec_b_data)
  );
  
  always @* begin
    M_dec_r_data_p = tmds[2+0-:1];
    M_dec_r_data_n = tmdsb[2+0-:1];
    M_dec_g_data_p = tmds[1+0-:1];
    M_dec_g_data_n = tmdsb[1+0-:1];
    M_dec_b_data_p = tmds[0+0-:1];
    M_dec_b_data_n = tmdsb[0+0-:1];
    M_dec_r_others_ready = M_dec_g_ready & M_dec_b_ready;
    M_dec_g_others_ready = M_dec_r_ready & M_dec_b_ready;
    M_dec_b_others_ready = M_dec_r_ready & M_dec_g_ready;
    M_dec_r_others_valid = M_dec_g_valid & M_dec_b_valid;
    M_dec_g_others_valid = M_dec_r_valid & M_dec_b_valid;
    M_dec_b_others_valid = M_dec_r_valid & M_dec_g_valid;
    pll_locked = M_bufpll_LOCK;
    pclk = M_pclkbufg_O;
    pclkx2 = M_pclkx2bufg_O;
    pclkx10 = M_bufpll_IOCLK;
    strobe = M_bufpll_SERDESSTROBE;
    hsync = M_dec_b_c0;
    vsync = M_dec_b_c1;
    de = M_dec_b_de;
    red = M_dec_r_data;
    green = M_dec_g_data;
    blue = M_dec_b_data;
  end
endmodule
