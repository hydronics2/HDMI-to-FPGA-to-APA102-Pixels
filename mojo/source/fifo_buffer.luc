module fifo_buffer (

  input clk,        //

  input rst,        //

  input hdmi_clk,

  input hdmi_vsyncFlag,


  input globalReadWriteStageFlag[2], //stage 0, stage 1, stage 2

  output currentFrame[4], //up to 10 frames

  input redIn[8],
  input greenIn[8],
  input blueIn[8],
  input writeFifo,

  input notWriting, //are we spi writing?

  output printSomething,

  output postFifoPixelCount[24], //all the LEDs

  output rgbOut0[24],
  output rgbOut1[24],
  output rgbOut2[24],
  output rgbOut3[24],
  output rgbOut4[24],
  output rgbOut5[24],
  output rgbOut6[24],
  output rgbOut7[24],
  output rgbOut8[24],
  output rgbOut9[24],
  output rgbOut10[24],
  output rgbOut11[24],
  output rgbOut12[24],
  output rgbOut13[24],
  output rgbOut14[24],
  output rgbOut15[24],
  output rgbOut16[24],
  output rgbOut17[24],
  output rgbOut18[24],
  output rgbOut19[24],
  output rgbOut20[24],
  output rgbOut21[24],
  output rgbOut22[24],
  output rgbOut23[24],
  output rgbOut24[24],
  output rgbOut25[24],
  output rgbOut26[24],
  output rgbOut27[24],
  output rgbOut28[24],
  output rgbOut29[24],
  output rgbOut30[24],
  output rgbOut31[24],
  output rgbOut32[24],

  input writePixelAddress0[10],
  input writePixelAddress1[10],
  input writePixelAddress2[10],
  input writePixelAddress3[10],
  input writePixelAddress4[10],
  input writePixelAddress5[10],
  input writePixelAddress6[10],
  input writePixelAddress7[10],
  input writePixelAddress8[10],
  input writePixelAddress9[10],
  input writePixelAddress10[10],
  input writePixelAddress11[10],
  input writePixelAddress12[10],
  input writePixelAddress13[10],
  input writePixelAddress14[10],
  input writePixelAddress15[10],
  input writePixelAddress16[10],
  input writePixelAddress17[10],
  input writePixelAddress18[10],
  input writePixelAddress19[10],
  input writePixelAddress20[10],
  input writePixelAddress21[10],
  input writePixelAddress22[10],
  input writePixelAddress23[10],
  input writePixelAddress24[10],
  input writePixelAddress25[10],
  input writePixelAddress26[10],
  input writePixelAddress27[10],
  input writePixelAddress28[10],
  input writePixelAddress29[10],

  input writePixelAddress30[10],
  input writePixelAddress31[10],
  input writePixelAddress32[10],

  output startWritingFlag,
  output startWritingFlag1,
  output startWritingFlag2,
  output startWritingFlag3,
  output startWritingFlag4,
  output startWritingFlag5,
  output startWritingFlag6,
  output startWritingFlag7,
  output startWritingFlag8,
  output startWritingFlag9,
  output startWritingFlag10,


  input startPixel0[10],
  input startPixel1[10],
  input startPixel2[10],


  output rowPixelAddress[5],

  input rowStartPixel0[10],  //bottom left
  input rowStartPixel1[10],  //top right
  input rowStartPixel2[10],  //bottom left
  input rowStartPixel3[10], //top left
  input rowStartPixel4[10], //top right
  input rowStartPixel5[10],  //top left
  //input rowStartPixel6[10],
  input rowStartPixel7[10],
  //input rowStartPixel8[10],
  //input rowStartPixel9[10],
  //input rowStartPixel10[10],
  //input rowStartPixel11[10],
  //input rowStartPixel12[10],
  //input rowStartPixel13[10],
  //input rowStartPixel14[10],
  //input rowStartPixel15[10],
  //input rowStartPixel16[10],
  //input rowStartPixel17[10],
  //input rowStartPixel18[10],
  //input rowStartPixel19[10],
  //input rowStartPixel20[10],
  //input rowStartPixel21[10],
  //input rowStartPixel22[10],
  //input rowStartPixel23[10],
  //input rowStartPixel24[10],
  //input rowStartPixel25[10],
  //input rowStartPixel26[10],
  //input rowStartPixel27[10],
  //input rowStartPixel28[10],
  //input rowStartPixel29[10],
  //input rowStartPixel30[10],
  //input rowStartPixel31[10],
  //input rowStartPixel32[10],


  //output resetFifo,
  
  output notConnected[24]
    
  

  ) {

  .clk(clk) {
    .rst(rst) {

    }

    dff rgb0Counter[10];
    dff rgb1Counter[10];
    dff rgb2Counter[10];

    dff rgb3Counter[10];
    dff rgb4Counter[10];
    dff rgb5Counter[10];

    dff rgb6Counter[10];
    dff rgb7Counter[10];
    dff rgb8Counter[10];

    dff rgb9Counter[10];
    dff rgb10Counter[10];
    dff rgb11Counter[10];


    dff rowCounter[8]; //219 rows
    dff columnCounter[7]; //102 columns wide
    dff pixel[24];
    dff newPixelFlag[2];

    dff pixelCounter[24]; //20,433 pixels

    dff frameCounter[4];


    dff frame0Write;
    dff frame1Write;
    dff frame2Write;
    dff frame3Write;


    dff readWriteStage[3]; //allows for up to 7
    dff startRoutine[2];

    

    // we need our RAM to have an entry for every value of name_count
    simple_ram rgb0 (#SIZE(24), #DEPTH(695));
    simple_ram rgb1 (#SIZE(24), #DEPTH(695));
    simple_ram rgb2 (#SIZE(24), #DEPTH(695));

    simple_ram rgb3 (#SIZE(24), #DEPTH(695));
    simple_ram rgb4 (#SIZE(24), #DEPTH(695));
    simple_ram rgb5 (#SIZE(24), #DEPTH(695));

    simple_ram rgb6 (#SIZE(24), #DEPTH(695));
    simple_ram rgb7 (#SIZE(24), #DEPTH(695));
    simple_ram rgb8 (#SIZE(24), #DEPTH(695));

    simple_ram rgb9 (#SIZE(24), #DEPTH(695));
    simple_ram rgb10 (#SIZE(24), #DEPTH(695));
    simple_ram rgb11 (#SIZE(24), #DEPTH(695));
  }


  // reset conditioner for pclk clock domain
  reset_conditioner wrst_cond (.clk(hdmi_clk), .in(rst));

  // asyncronous fifo for crossing clock domains (pclk to clk)
  async_fifo fifo (#SIZE(24), #DEPTH(64), .wclk(hdmi_clk), .rclk(clk), .wrst(wrst_cond.out), .rrst(rst)); //32 did not run, 64 9&10 glitching, 128 doesn't work at first and then perhaps starts working after a few mintues?


  always {
    notConnected = 0;

    printSomething = 0;

    startWritingFlag = 0;
    startWritingFlag1 = 0;
    startWritingFlag2 = 0;
    startWritingFlag3 = 0;
    startWritingFlag4 = 0;
    startWritingFlag5 = 0;
    startWritingFlag6 = 0;
    startWritingFlag7 = 0;
    startWritingFlag8 = 0;
    startWritingFlag9 = 0;
    startWritingFlag10 = 0;

    //postFifoPixelCount = pixelCounter.q;
    postFifoPixelCount = 0;

    rowPixelAddress = rowCounter.q;

    rgb0.address = rgb0Counter.q;
    rgb0.write_data = 8hxx;
    rgb0.write_en = 0;

    rgb1.address = rgb1Counter.q;
    rgb1.write_data = 8hxx;
    rgb1.write_en = 0;

    rgb2.address = rgb2Counter.q;
    rgb2.write_data = 8hxx;
    rgb2.write_en = 0;

    rgb3.address = rgb3Counter.q;
    rgb3.write_data = 8hxx;
    rgb3.write_en = 0;

    rgb4.address = rgb4Counter.q;
    rgb4.write_data = 8hxx;
    rgb4.write_en = 0;

    rgb5.address = rgb5Counter.q;
    rgb5.write_data = 8hxx;
    rgb5.write_en = 0;


    rgb6.address = rgb6Counter.q;
    rgb6.write_data = 8hxx;
    rgb6.write_en = 0;

    rgb7.address = rgb7Counter.q;
    rgb7.write_data = 8hxx;
    rgb7.write_en = 0;

    rgb8.address = rgb8Counter.q;
    rgb8.write_data = 8hxx;
    rgb8.write_en = 0;

    rgb9.address = rgb9Counter.q;
    rgb9.write_data = 8hxx;
    rgb9.write_en = 0;

    rgb10.address = rgb10Counter.q;
    rgb10.write_data = 8hxx;
    rgb10.write_en = 0;

    rgb11.address = rgb11Counter.q;
    rgb11.write_data = 8hxx;
    rgb11.write_en = 0;


    fifo.wput = writeFifo;   // always put data into the fifo
    //fifo.wput = 1;
    fifo.rget = 0;   // always get data from the fifo

    fifo.din[7:0] = redIn;
    fifo.din[15:8] = greenIn;
    fifo.din[23:16] = blueIn;

    rgbOut0 = 0;
    rgbOut1 = 0;
    rgbOut2 = 0;
    rgbOut3 = 0;
    rgbOut4 = 0;
    rgbOut5 = 0;
    rgbOut6 = 0;
    rgbOut7 = 0;
    rgbOut8 = 0;
    rgbOut9 = 0;
    rgbOut10 = 0;
    rgbOut11 = 0;
    rgbOut12 = 0;
    rgbOut13 = 0;
    rgbOut14 = 0;
    rgbOut15 = 0;
    rgbOut16 = 0;
    rgbOut17 = 0;

    rgbOut18 = 0;
    rgbOut19 = 0;
    rgbOut20 = 0;
    rgbOut21 = 0;
    rgbOut22 = 0;
    rgbOut23 = 0;
    rgbOut24 = 0;
    rgbOut25 = 0;
    rgbOut26 = 0;
    rgbOut27 = 0;
    rgbOut28 = 0;
    rgbOut29 = 0;
    rgbOut30 = 0;
    rgbOut31 = 0;
    rgbOut32 = 0;

    //resetFifo = 0;
    

    currentFrame = frameCounter.q;

    if(hdmi_vsyncFlag) //start of frame... reset pixel counter
    {
      columnCounter.d = 0;
      rowCounter.d = 1;
      newPixelFlag.d = 0;
      pixelCounter.d = 0;

      frame0Write.d = 0;
      frame1Write.d = 0;
      frame2Write.d = 0;
      frame3Write.d = 0;

      startRoutine.d = 1;
    }

    readWriteStage.d = globalReadWriteStageFlag;    
    

    if(startRoutine.q)
    {
      if(readWriteStage.q == 0)
      {
        frameCounter.d = 0;

        rgb0Counter.d = 679; //frame 0
        rgb1Counter.d = 33;
        rgb2Counter.d = 679;

        rgb3Counter.d = 679; //frame 3
        rgb4Counter.d = 33;
        rgb5Counter.d = 679;

        rgb6Counter.d = 679; //frame 5
        rgb7Counter.d = 33;
        rgb8Counter.d = 679;

        
      }

      if(readWriteStage.q == 1)
      {
        frameCounter.d = 1;

        rgb0Counter.d = 0; //frame 1
        rgb1Counter.d = 33;
        rgb2Counter.d = 0;

        rgb3Counter.d = 679;//frame 4
        rgb4Counter.d = 33;
        rgb5Counter.d = 679;

        rgb6Counter.d = 679;//frame 7
        rgb7Counter.d = 646;
        rgb8Counter.d = 679;

        rgb9Counter.d = 679;  //frame 9
        rgb10Counter.d = 33;
        rgb11Counter.d = 679;
      }

      if(readWriteStage.q == 2)
      {
        frameCounter.d = 2;

        rgb0Counter.d = 679; //frame 2
        rgb1Counter.d = 646;
        rgb2Counter.d = 679;

        rgb3Counter.d = 0; //frame 6
        rgb4Counter.d = 33;
        rgb5Counter.d = 0;

        rgb6Counter.d = 679;  //frame 8
        rgb7Counter.d = 33;
        rgb8Counter.d = 679;
        
        rgb9Counter.d = 679;  //frame 10
        rgb10Counter.d = 33;
        rgb11Counter.d = 679;
      }
      if(readWriteStage.q == 3)
      {
        frameCounter.d = 10;
        
        rgb9Counter.d = 679;  //frame 10
        rgb10Counter.d = 33;
        rgb11Counter.d = 679;
      }      
      startRoutine.d = 0;
    }


    if(readWriteStage.q == 0) //-----------------------STAGE 0----------------frames 0,3,6,9
    {

      if(frameCounter.q == 0)                   //----------------FRAME 0, panels 0,1,2 and ram modules rgb0,rgb1,rgb2
      { //read  into RAM panels 0,1,2
         if (!fifo.empty && newPixelFlag.q == 0)
            {
              fifo.rget = 1;
              pixel.d = fifo.dout[23:0];
              newPixelFlag.d = 1;
          }

          if(newPixelFlag.q == 1)
          {
            newPixelFlag.d = 2;

            if(columnCounter.q < 34)
            {
              rgb0.write_data = pixel.q;
              rgb0.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb0Counter.d = rgb0Counter.q - 1;
              }else{
                rgb0Counter.d = rgb0Counter.q + 1;
              }
            }
            if(columnCounter.q > 33 && columnCounter.q < 68)
            {
              rgb1.write_data = pixel.q;
              rgb1.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb1Counter.d = rgb1Counter.q - 1;
              }else{
                rgb1Counter.d = rgb1Counter.q + 1;
              }
            }

            if(columnCounter.q > 67 && columnCounter.q < 102)
            {
              rgb2.write_data = pixel.q;
              rgb2.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb2Counter.d = rgb2Counter.q - 1;
              }else{
                rgb2Counter.d = rgb2Counter.q + 1;
              }
            }
          }

          if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb0Counter.d = rowStartPixel0;
              rgb1Counter.d = rowStartPixel1;
              rgb2Counter.d = rowStartPixel2;
            }
          }

          if(pixelCounter.q == 2040) //all 3 panels captured in ram
          {
            frameCounter.d = 3;
            pixelCounter.d = 0;
            columnCounter.d = 0;
            rowCounter.d = 1;
            newPixelFlag.d = 0;
          }
        }

        //-----------------------------FRAME 3 ------- panels 9,10&11 on ram modules rgb3,rgb4,rgb5
        if(frameCounter.q == 3)
        {
          if (!fifo.empty && newPixelFlag.q == 0)
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          }

          if(newPixelFlag.q == 1)
          {
            newPixelFlag.d = 2;

            if(columnCounter.q < 34)
            {
              rgb3.write_data = pixel.q;
              rgb3.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb3Counter.d = rgb3Counter.q - 1;
              }else{
                rgb3Counter.d = rgb3Counter.q + 1;
              }
            }
            if(columnCounter.q > 33 && columnCounter.q < 68)
            {
              rgb4.write_data = pixel.q;
              rgb4.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb4Counter.d = rgb4Counter.q - 1;
              }else{
                rgb4Counter.d = rgb4Counter.q + 1;
              }
            }

            if(columnCounter.q > 67 && columnCounter.q < 102)
            {
              rgb5.write_data = pixel.q;
              rgb5.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb5Counter.d = rgb5Counter.q - 1;
              }else{
                rgb5Counter.d = rgb5Counter.q + 1;
              }
            }
          }

          if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb3Counter.d = rowStartPixel0;
              rgb4Counter.d = rowStartPixel1;
              rgb5Counter.d = rowStartPixel2;
            }
          }

          if(pixelCounter.q == 2040) //all 3 panels captured in ram
          {
            frameCounter.d = 5;
            pixelCounter.d = 0;
            columnCounter.d = 0;
            rowCounter.d = 1;
            newPixelFlag.d = 0;
          }
        }


      //-----------------------------FRAME 5 ------- panels 15,16,17 on ram modules rgb6,rgb7,rgb8
      if(frameCounter.q == 5)
      {
        if (!fifo.empty && newPixelFlag.q == 0)
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb6.write_data = pixel.q;
            rgb6.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb6Counter.d = rgb6Counter.q - 1;
            }else{
              rgb6Counter.d = rgb6Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb7.write_data = pixel.q;
            rgb7.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb7Counter.d = rgb7Counter.q - 1;
            }else{
              rgb7Counter.d = rgb7Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb8.write_data = pixel.q;
            rgb8.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb8Counter.d = rgb8Counter.q - 1;
            }else{
              rgb8Counter.d = rgb8Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb6Counter.d = rowStartPixel0;
            rgb7Counter.d = rowStartPixel1;
            rgb8Counter.d = rowStartPixel2;
          }
        }
      
        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frame0Write.d = 1;
          startWritingFlag = 1;
          startWritingFlag3 = 1;
          startWritingFlag5 = 1;
          pixelCounter.d = pixelCounter.q + 1;
        }
      }
      
      
      if(frame0Write.q == 1)  //------------start writing all Stage 0 pixels in RAM to LED panels via SPI
      {
        fifo.wput = 0;   // stop putting data into the fifo
        fifo.rget = 0;   // stop getting data from the fifo
        rgb0.address = writePixelAddress0;
        rgb0Counter.d = writePixelAddress0;
        rgbOut0 = rgb0.read_data;
      
        rgb1.address = writePixelAddress1;
        rgb1Counter.d = writePixelAddress1;
        rgbOut1 = rgb1.read_data;
      
        rgb2.address = writePixelAddress2;
        rgb2Counter.d = writePixelAddress2;
        rgbOut2 = rgb2.read_data;
      
        //frame 3
        rgb3.address = writePixelAddress9;
        rgb3Counter.d = writePixelAddress9;
        rgbOut9 = rgb3.read_data;
      
        rgb4.address = writePixelAddress10;
        rgb4Counter.d = writePixelAddress10;
        rgbOut10 = rgb4.read_data;
      
        rgb5.address = writePixelAddress11;
        rgb5Counter.d = writePixelAddress11;
        rgbOut11 = rgb5.read_data;
      
        //frame 5
        rgb6.address = writePixelAddress15;
        rgb6Counter.d = writePixelAddress15;
        rgbOut15 = rgb6.read_data;
      
        rgb7.address = writePixelAddress16;
        rgb7Counter.d = writePixelAddress16;
        rgbOut16 = rgb7.read_data;
      
        rgb8.address = writePixelAddress17;
        rgb8Counter.d = writePixelAddress17;
        rgbOut17 = rgb8.read_data;
      
      }
    }//end stage 0

    
    
    if(readWriteStage.q == 1) //------STAGE 1 ------frames 1,4,7,10
    {
      //-----------------------------FRAME 1 ----- panels 3,4,5 in ram modules rgb0,rgb1,rgb2
      if(frameCounter.q == 1)
      {
          if (!fifo.empty && newPixelFlag.q == 0)
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q + 1;
            }else{
              rgb0Counter.d = rgb0Counter.q - 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q - 1;
            }else{
              rgb1Counter.d = rgb1Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q + 1;
            }else{
              rgb2Counter.d = rgb2Counter.q - 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel3;
            rgb1Counter.d = rowStartPixel4;
            rgb2Counter.d = rowStartPixel5;
          }
        }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram ... was 2039
        {
          frameCounter.d = 4;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }

      }


      //-----------------------------FRAME 4 ----   //panels 12,13,14 in ram modules rgb3,rgb4,rgb5
      if(frameCounter.q == 4)
      {
        if (!fifo.empty && newPixelFlag.q == 0)
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb3.write_data = pixel.q;
            rgb3.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb3Counter.d = rgb3Counter.q - 1;
            }else{
              rgb3Counter.d = rgb3Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb4.write_data = pixel.q;
            rgb4.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb4Counter.d = rgb4Counter.q - 1;
            }else{
              rgb4Counter.d = rgb4Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb5.write_data = pixel.q;
            rgb5.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb5Counter.d = rgb5Counter.q - 1;
            }else{
              rgb5Counter.d = rgb5Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb3Counter.d = rowStartPixel0;
            rgb4Counter.d = rowStartPixel1;
            rgb5Counter.d = rowStartPixel2;
          }
        }
        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frameCounter.d = 7;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }
      }




      //-----------------------------FRAME 7 ----------   //panels 21,22,23 in ram modules rgb6,rgb7,rgb8
      if(frameCounter.q == 7)
      {
          if (!fifo.empty && newPixelFlag.q == 0)
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb6.write_data = pixel.q;
            rgb6.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb6Counter.d = rgb6Counter.q - 1;
            }else{
              rgb6Counter.d = rgb6Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb7.write_data = pixel.q;
            rgb7.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb7Counter.d = rgb7Counter.q + 1;
            }else{
              rgb7Counter.d = rgb7Counter.q - 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb8.write_data = pixel.q;
            rgb8.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb8Counter.d = rgb8Counter.q - 1;
            }else{
              rgb8Counter.d = rgb8Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb6Counter.d = rowStartPixel0;  //bottom left
            rgb7Counter.d = rowStartPixel7;  //bottom right
            rgb8Counter.d = rowStartPixel0;  //bottom left
          }
        }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frameCounter.d = 9;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }
      }




        //----------------------FRAME 9 -----//panels 27,28,29 in ram modules rgb9,rgb10,rgb11
      if(frameCounter.q == 9)
      {
        if (!fifo.empty && newPixelFlag.q == 0)
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb9.write_data = pixel.q;
            rgb9.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb9Counter.d = rgb9Counter.q - 1;
            }else{
              rgb9Counter.d = rgb9Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb10.write_data = pixel.q;
            rgb10.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb10Counter.d = rgb10Counter.q - 1;
            }else{
              rgb10Counter.d = rgb10Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb11.write_data = pixel.q;
            rgb11.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb11Counter.d = rgb11Counter.q - 1;
            }else{
              rgb11Counter.d = rgb11Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
          {
            newPixelFlag.d = 0;
            columnCounter.d = columnCounter.q + 1;
            pixelCounter.d = pixelCounter.q + 1;
            if(columnCounter.q == 101)
            {
              rowCounter.d = rowCounter.q + 1;
              columnCounter.d = 0;
              rgb9Counter.d = rowStartPixel0;
              rgb10Counter.d = rowStartPixel1;
              rgb11Counter.d = rowStartPixel2;
            }
          }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frame1Write.d = 1;
          startWritingFlag1 = 1;
          startWritingFlag4 = 1;
          startWritingFlag7 = 1;
          startWritingFlag9 = 1; //changed from 10 to 9 for testing
          pixelCounter.d = pixelCounter.q + 1;
        }
      }

      if(frame1Write.q) //------------start writing all Stage 1 pixels in RAM to LED panels via SPI
      {
        fifo.wput = 0;   // stop putting data into the fifo
        fifo.rget = 0;   // stop getting data from the fifo
        //panels 3,4,5 in ram modules rgb0,rgb1,rgb2
        rgb0.address = writePixelAddress3;
        rgb0Counter.d = writePixelAddress3;
        rgbOut3 = rgb0.read_data;

        rgb1.address = writePixelAddress4;
        rgb1Counter.d = writePixelAddress4;
        rgbOut4 = rgb1.read_data;

        rgb2.address = writePixelAddress5;
        rgb2Counter.d = writePixelAddress5;
        rgbOut5 = rgb2.read_data;

        
        //panels 12,13,14 in ram modules rgb3,rgb4,rgb5
        rgb3.address = writePixelAddress12;
        rgb3Counter.d = writePixelAddress12;
        rgbOut12 = rgb3.read_data;

        rgb4.address = writePixelAddress13;
        rgb4Counter.d = writePixelAddress13;
        rgbOut13 = rgb4.read_data;

        rgb5.address = writePixelAddress14;
        rgb5Counter.d = writePixelAddress14;
        rgbOut14 = rgb5.read_data;

        
        //panels 21,22,23 in ram modules rgb6,rgb7,rgb8
        rgb6.address = writePixelAddress21;
        rgb6Counter.d = writePixelAddress21;
        rgbOut21 = rgb6.read_data;

        rgb7.address = writePixelAddress22;
        rgb7Counter.d = writePixelAddress22;
        rgbOut22 = rgb7.read_data;

        rgb8.address = writePixelAddress23;
        rgb8Counter.d = writePixelAddress23;
        rgbOut23 = rgb8.read_data;

                
        //panels 27, 28, 29 in ram modules rgb9,rgb10,rgb11
        rgb9.address = writePixelAddress27;
        rgb9Counter.d = writePixelAddress27;
        rgbOut27= rgb9.read_data;

        rgb10.address = writePixelAddress28;
        rgb10Counter.d = writePixelAddress28;
        rgbOut28 = rgb10.read_data;

        rgb11.address = writePixelAddress29;
        rgb11Counter.d = writePixelAddress29;
        rgbOut29 = rgb11.read_data;
      }
    } ///end readWriteStage 1


    

    if(readWriteStage.q == 2) //------------STAGE 2---------- (last stage) frames 2,6,8,10
    {
      //------------------------------------FRAME 2 ----- panels 6,7,8 in ram modules rgb0,rgb1,rgb2
      if(frameCounter.q == 2)
      {
          if (!fifo.empty && newPixelFlag.q == 0)
          {
            fifo.rget = 1;
            pixel.d = fifo.dout[23:0];
            newPixelFlag.d = 1;
          }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb0.write_data = pixel.q;
            rgb0.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb0Counter.d = rgb0Counter.q - 1;
            }else{
              rgb0Counter.d = rgb0Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb1.write_data = pixel.q;
            rgb1.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb1Counter.d = rgb1Counter.q + 1;
            }else{
              rgb1Counter.d = rgb1Counter.q - 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb2.write_data = pixel.q;
            rgb2.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb2Counter.d = rgb2Counter.q - 1;
            }else{
              rgb2Counter.d = rgb2Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb0Counter.d = rowStartPixel0;  //bottom left
            rgb1Counter.d = rowStartPixel7;  //bottom right
            rgb2Counter.d = rowStartPixel2;  //bottom left
          }
        }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frameCounter.d = 6;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }
      }

      //-----------------------------FRAME 6 ------- panels 18,19,20 in ram modules rgb3,rgb4,rgb5
      if(frameCounter.q == 6)
      {
        if (!fifo.empty && newPixelFlag.q == 0)
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb3.write_data = pixel.q;
            rgb3.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb3Counter.d = rgb3Counter.q + 1;
            }else{
              rgb3Counter.d = rgb3Counter.q - 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb4.write_data = pixel.q;
            rgb4.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb4Counter.d = rgb4Counter.q - 1;
            }else{
              rgb4Counter.d = rgb4Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb5.write_data = pixel.q;
            rgb5.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb5Counter.d = rgb5Counter.q + 1;
            }else{
              rgb5Counter.d = rgb5Counter.q - 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;
          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb3Counter.d = rowStartPixel3;
            rgb4Counter.d = rowStartPixel4;
            rgb5Counter.d = rowStartPixel5;
          }
        }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frameCounter.d = 8;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }
      }

      //-----------------------------FRAME 8 ------- panels 24,25,26 in ram modules rgb6,rgb7,rgb8
      if(frameCounter.q == 8)
      {
        if (!fifo.empty && newPixelFlag.q == 0)
        {
          fifo.rget = 1;
          pixel.d = fifo.dout[23:0];
          newPixelFlag.d = 1;
        }

        if(newPixelFlag.q == 1)
        {
          newPixelFlag.d = 2;

          if(columnCounter.q < 34)
          {
            rgb6.write_data = pixel.q;
            rgb6.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb6Counter.d = rgb6Counter.q - 1;
            }else{
              rgb6Counter.d = rgb6Counter.q + 1;
            }
          }
          if(columnCounter.q > 33 && columnCounter.q < 68)
          {
            rgb7.write_data = pixel.q;
            rgb7.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb7Counter.d = rgb7Counter.q - 1;
            }else{
              rgb7Counter.d = rgb7Counter.q + 1;
            }
          }

          if(columnCounter.q > 67 && columnCounter.q < 102)
          {
            rgb8.write_data = pixel.q;
            rgb8.write_en = 1;

            if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
            {
              rgb8Counter.d = rgb8Counter.q - 1;
            }else{
              rgb8Counter.d = rgb8Counter.q + 1;
            }
          }
        }

        if(newPixelFlag.q == 2)
        {
          newPixelFlag.d = 0;
          columnCounter.d = columnCounter.q + 1;
          pixelCounter.d = pixelCounter.q + 1;

          if(columnCounter.q == 101)
          {
            rowCounter.d = rowCounter.q + 1;
            columnCounter.d = 0;
            rgb6Counter.d = rowStartPixel0;
            rgb7Counter.d = rowStartPixel1;
            rgb8Counter.d = rowStartPixel2;
          }
        }

        if(pixelCounter.q == 2040) //all 3 panels captured in ram
        {
          frameCounter.d = 10;
          pixelCounter.d = 0;
          columnCounter.d = 0;
          rowCounter.d = 1;
          newPixelFlag.d = 0;
        }
      }
      
      //-----------------------------FRAME 10 ---- panels 30,31,32 on ram modules rgb9,rgb10,rgb11
      if(frameCounter.q == 10)
      {
         if (!fifo.empty && newPixelFlag.q == 0)
            {
              fifo.rget = 1;
              pixel.d = fifo.dout[23:0];
              newPixelFlag.d = 1;
          }

          if(newPixelFlag.q == 1)
          {
            newPixelFlag.d = 2;

            if(columnCounter.q < 34)
            {
              rgb9.write_data = pixel.q;
              rgb9.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb9Counter.d = rgb9Counter.q - 1;
              }else{
                rgb9Counter.d = rgb9Counter.q + 1;
              }
            }
            if(columnCounter.q > 33 && columnCounter.q < 68)
            {
              rgb10.write_data = pixel.q;
              rgb10.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb10Counter.d = rgb10Counter.q - 1;
              }else{
                rgb10Counter.d = rgb10Counter.q + 1;
              }
            }

            if(columnCounter.q > 67 && columnCounter.q < 102)
            {
              rgb11.write_data = pixel.q;
              rgb11.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb11Counter.d = rgb11Counter.q - 1;
              }else{
                rgb11Counter.d = rgb11Counter.q + 1;
              }
            }
          }

          if(newPixelFlag.q == 2)
            {
              newPixelFlag.d = 0;
              columnCounter.d = columnCounter.q + 1;
              pixelCounter.d = pixelCounter.q + 1;
              if(columnCounter.q == 101)
              {
                rowCounter.d = rowCounter.q + 1;
                columnCounter.d = 0;
                rgb9Counter.d = rowStartPixel0;
                rgb10Counter.d = rowStartPixel1;
                rgb11Counter.d = rowStartPixel2;
              }
            }

          if(pixelCounter.q == 2040) //all 3 panels captured in ram
          {
            frame2Write.d = 1;
            startWritingFlag2 = 1;
            startWritingFlag6 = 1;
            startWritingFlag8 = 1;
            startWritingFlag10 = 1;  
            pixelCounter.d = pixelCounter.q + 1;
            
          }
        } //end Frame 10 
      

      if(frame2Write.q == 1) //------------start writing all Stage 2 pixels in RAM to LED panels via SPI
      {
        //fifo.wput = 0;   // stop putting data into the fifo
        //fifo.rget = 0;   // stop getting data from the fifo
        //frame 2, panels 6,7,8
        rgb0.address = writePixelAddress6;
        rgb0Counter.d = writePixelAddress6;
        rgbOut6 = rgb0.read_data;

        rgb1.address = writePixelAddress7;
        rgb1Counter.d = writePixelAddress7;
        rgbOut7 = rgb1.read_data;

        rgb2.address = writePixelAddress8;
        rgb2Counter.d = writePixelAddress8;
        rgbOut8 = rgb2.read_data;

        //frame 6, panels 18,19,20
        rgb3.address = writePixelAddress18;
        rgb3Counter.d = writePixelAddress18;
        rgbOut18 = rgb3.read_data;

        rgb4.address = writePixelAddress19;
        rgb4Counter.d = writePixelAddress19;
        rgbOut19 = rgb4.read_data;

        rgb5.address = writePixelAddress20;
        rgb5Counter.d = writePixelAddress20;
        rgbOut20 = rgb5.read_data;

        //frame 8, panels 24,25,26
        rgb6.address = writePixelAddress24;
        rgb6Counter.d = writePixelAddress24;
        rgbOut24 = rgb6.read_data;

        rgb7.address = writePixelAddress25;
        rgb7Counter.d = writePixelAddress25;
        rgbOut25 = rgb7.read_data;

        rgb8.address = writePixelAddress26;
        rgb8Counter.d = writePixelAddress26;
        rgbOut26 = rgb8.read_data;
        
        //frame 10
        rgb9.address = writePixelAddress30;
        rgb9Counter.d = writePixelAddress30;
        rgbOut30 = rgb9.read_data;
      
        rgb10.address = writePixelAddress31;
        rgb10Counter.d = writePixelAddress31;
        rgbOut31 = rgb10.read_data;
      
        rgb11.address = writePixelAddress32;
        rgb11Counter.d = writePixelAddress32;
        rgbOut32 = rgb11.read_data;
          
      }
    } //end Stage2
    
    
    
    
    if(readWriteStage.q == 3) //------------STAGE 3---------- (last stage) frames 10
    {
      //-----------------------------FRAME 10 ---- panels 30,31,32 on ram modules rgb9,rgb10,rgb11
      if(frameCounter.q == 10)
      {
         if (!fifo.empty && newPixelFlag.q == 0)
            {
              fifo.rget = 1;
              pixel.d = fifo.dout[23:0];
              newPixelFlag.d = 1;
          }

          if(newPixelFlag.q == 1)
          {
            newPixelFlag.d = 2;

            if(columnCounter.q < 34)
            {
              rgb9.write_data = pixel.q;
              rgb9.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb9Counter.d = rgb9Counter.q - 1;
              }else{
                rgb9Counter.d = rgb9Counter.q + 1;
              }
            }
            if(columnCounter.q > 33 && columnCounter.q < 68)
            {
              rgb10.write_data = pixel.q;
              rgb10.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb10Counter.d = rgb10Counter.q - 1;
              }else{
                rgb10Counter.d = rgb10Counter.q + 1;
              }
            }

            if(columnCounter.q > 67 && columnCounter.q < 102)
            {
              rgb11.write_data = pixel.q;
              rgb11.write_en = 1;

              if(rowCounter.q[0])  //if first bit of 0-19 rows returns a 1(true) then even rows and we count up
              {
                rgb11Counter.d = rgb11Counter.q - 1;
              }else{
                rgb11Counter.d = rgb11Counter.q + 1;
              }
            }
          }

          if(newPixelFlag.q == 2)
            {
              newPixelFlag.d = 0;
              columnCounter.d = columnCounter.q + 1;
              pixelCounter.d = pixelCounter.q + 1;
              if(columnCounter.q == 101)
              {
                rowCounter.d = rowCounter.q + 1;
                columnCounter.d = 0;
                rgb9Counter.d = rowStartPixel0;
                rgb10Counter.d = rowStartPixel1;
                rgb11Counter.d = rowStartPixel2;
              }
            }

          if(pixelCounter.q == 2040) //all 3 panels captured in ram
          {
            frame3Write.d = 1;
            startWritingFlag10 = 1;  
            pixelCounter.d = pixelCounter.q + 1;
            
          }
        } //end Frame 10 
        

      if(frame3Write.q == 1) //------------start writing all Stage 2 pixels in RAM to LED panels via SPI
      {
        fifo.wput = 0;   // stop putting data into the fifo
        fifo.rget = 0;   // stop getting data from the fifo   
        //frame 10
        rgb9.address = writePixelAddress30;
        rgb9Counter.d = writePixelAddress30;
        rgbOut30 = rgb9.read_data;
      
        rgb10.address = writePixelAddress31;
        rgb10Counter.d = writePixelAddress31;
        rgbOut31 = rgb10.read_data;
      
        rgb11.address = writePixelAddress32;
        rgb11Counter.d = writePixelAddress32;
        rgbOut32 = rgb11.read_data;          
      }
    } //end Stage3                        
  }
}
